<?xml version="1.0" encoding="UTF-8" ?>
<aiscript name="ut.cac.com.drone.gatherressources" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://utnas/~unitrader/XRebirthxsds/aiscripts.xsd" version="1">
  <!--
  This script can be either used with a target or a ware. If a target is provided,
  the drone tries to collect the target and returns to its homebase with the pickup.
  If instead the ware parameter is set, the drone flys to some random locations and
  returns to the homebase afterwards. The corresponding ware is then added via script.
  by Michael and Benedikt
  
  Modified Version by UniTrader to work better with Stations
  -->
  <params>
    <param name="homebase" default="this.ship.commander.commander" comment="the homebase for this drone"/>
    <param name="target" default="null" comment="the target pickup (if there is one for the corresponding resource)"/>
    <param name="ware" default="null" comment="the resource this drone should collect (if there is no target)"/>
  </params>
  <interrupts>
    <handler ref="TargetInvalidHandler" />
    <handler ref="ut_cac_lib_interrupt_attacked"/>
  </interrupts>
  <attention min="visible">
    <actions>
      <set_value name="$gatherlocations" exact="3" comment="the number of locations the Ship flies randomly to to simulate collecting Gasses (no Target)"/>
      <set_value name="$gathermindistance" exact="10m" comment="the min Distance the Drone keeps from its Homebase Ship/Station (no Target)"/>
      <set_value name="$gathermaxdistance" exact="500m" comment="the max Distance the Drone flies away from its Homebase Ship/Station (no Target)"/>
      
      <label name="start" />
      <!-- undock -->
      <wait>
	    <interrupt_after_time time="2min"/>
        <interrupt>
          <conditions>
            <check_any>
              <!-- <event_object_approaching_waypoint object="this.ship" lastwaypoint="true"/> -->
              <event_object_arrived_at_waypoint object="this.ship" lastwaypoint="true"/>
            </check_any>
          </conditions>
        </interrupt>
      </wait>
      <clear_collision_filter object="this.ship" />

      <label name="collect" />
      <!-- collect -->
      <do_if value="$target" exact="null">
        <!-- there is no pickup, fly to random positions near Station instead -->
        <do_all exact="$gatherlocations">
          <!-- repeatedly move to random locations -->
          <!--do_if value="$homebase.isclass.station"-->
            <create_random_position_outside_boundingbox name="$targetpos" component="$homebase" mindistance="$gathermindistance" maxdistance="$gathermaxdistance"/>
            <transform_position name="$targetpos" refposition="$homebase.position" refrotation="$homebase.rotation">
              <position value="$targetpos"/>
            </transform_position>
          <!--/do_if>
          <do_else>
            <create_position name="$targetpos" object="$homebase" min="$homebase.size + $gathermindistance" max="$homebase.size + $gathermaxdistance"/>
          </do_else-->
          <move_to destination="this.ship.zone" object="this.ship" flightbehaviour="flightbehaviour.generic" finishonapproach="true" forcesteering="true">
            <position value="$targetpos"/>
          </move_to>
          </do_all>
        <!-- dock again -->
        <run_script name="'move.dockat.drone'">
          <param name="destination" value="$homebase" />
        </run_script>
        <assert value="false" text="'\'move.dockat.drone\' returned to visible-block of \'mining.ship.drone\' for drone %1 [%2] [ Michael ]'.[this.ship.knownname, this.ship]" />
      </do_if>
      <do_else>
        <!-- there is a pickup, go and get it -->
        <run_script name="'move.collect.drone'">
          <param name="target" value="$target" />
          <param name="homebase" value="$homebase" />
          <param name="stayactive" value="true" />
          <param name="launching" value="false" />
        </run_script>
        <!-- move.collect.drone also handles docking -->
      </do_else>

      <!-- we are only down here if docking didn't work, most likely because the homebase is dead, we just wait until the low-attention case cleans up -->
      <stop_moving object="this.ship" />
      <wait sinceversion="1" max="5s"  />

      <resume label="collect"/>

    </actions>
  </attention>
  <attention min="unknown">
    <actions>
      <!-- cleanup -->
      <label name="start" />
      <label name="collect" />

      <do_if value="this.ship.commander.isoperational">
        <run_script name="'move.dockat.drone'" sinceversion="1">
          <param name="destination" value="this.ship.commander" />
        </run_script>
        <assert value="false" text="'\'move.dockat.drone\' returned to unknown-block of \'mining.ship.drone\' for drone %1 [%2] [ Michael ]'.[this.ship.knownname, this.ship]" />
      </do_if>
      <do_else>
        <destroy_object object="this.ship" explosion="false" />
      </do_else>

      <!-- drone no longer exists if the drone docked successfully -->
    </actions>
  </attention>
</aiscript>