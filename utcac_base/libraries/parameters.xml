<?xml version="1.0" encoding="UTF-8"?>
<!--parameters xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xsi:noNamespaceSchemaLocation="http://utnas/~unitrader/XRebirthxsds/parameters.xsd">
  <scriptparams-->
<diff>
  <add sel="//scriptparams">
    <category name="ut_cac">
      <!-- Limits of the possible Ranges -->
      <!-- Nested List: Index 1: Manager Skill (1-5), Index2: Max Gates (unused), Galaxy allowed, Max Clusters, Max Sectors, Max Zones, Num Slots -->
      <!-- Navigation Skill of 0 restricts the Actor to the current Sector - default Setting, not changeable. -->
      <param name="rangelimits" value="[
      [ 1 , 0 , 0 , 1 , 2 , 2 ],
      [ 2 , 0 , 1 , 2 , 3 , 3 ],
      [ 4 , 0 , 2 , 3 , 4 , 4 ],
      [ 7 , 0 , 3 , 4 , 5 , 5 ],
      [ 11 , 1 , 4 , 5 , 6 , 6 ]
      ]"/>
      <!-- cost of Ranges - replacement mechanic for previous Limit to a certain count depending on manager level - will be implemented at a later date -->
      <param name="rangeprices" value="table[
      {'$points_per_star'} = 20,
      {'$sixth_star_points'} = 50,
      {class.galaxy} = 150,
      {class.cluster} = 36,
      {class.sector} = 6,
      {class.zone} = 1
      ]"/>
      <!-- Default Settings used by all Actors -->
      <!--(note: not verified if they are valid in situ since these are assumed to be safe) -->
      <!--(Also some are Environment-Secific or Entity-Specific, like:
      $range
      $range_h
      $range_j
      $experience (Start Values depend on current Skill, see next Param)
      -->
      <!-- $consumables may be changed into tradeware if 4.0 brings the expected changes (like adjustable target levels)
      $consumables.$target defines the desired Amount which should be kept in Cargo (treated like the Target Amount for Ressources)
      $consumables.$prioritymulti defines the multiplicator how important is a ware (1.0 - products for sale + ressources, 0.75 secondary ressources, 0.5 trade wares) -->
      <param name="setting_defaults" value="table[
      {'$pesterlevel'} = 60,
      {'$loglevel'} = 60,
      {'$legality'} = 1,
      {'$jumptype'} = 'beacon',
      {'$insectorjump'} = false,
      {'$currenttrade'} = null,
      {'$consumables'} = table[ { ware.fuelcells } = table[{'$target'}=2500 , {'$prioritymulti'}=1.05 ] ]
      ]"/>
      <param name="pesterlevel" value="table[
      {'$mayspeak'} = 2
      ]"/>
      <param name="loglevel" value="table[
      {'$wage'} = 45,
      {'$promotion'} = 65,
      {'$riskbonus'} = 90,
      {'$surplustransfer'} = 85,
      {'$lowfunds'} = 100,
      {'$objectattacked'} = 95,
      {'$ordergiven'} = 25,
      {'$personalactivities'} = 5,
      {'$traderuncompleted'} = 30
      ]"/>
      <!-- table of Ware Priorities  (Note: buildingmaterial is always the same Prio, the others are multiplied by targetamount ratio)-->
      <param name="waretypepriorities" value="table[
      {'$product'} = 1.00,
      {'$ressource'} = 1.00,
      {'$secondaryressource'} = 0.75,
      {'$buildingmaterial'} = 0.4,
      {'$tradeware'} = 0.5,
      {'$consumable'} = 0.75
      ]"/>
      <!-- DEPRACTED/MAJOR REVISION PLANNED:
      default Drone Loadout - a Nested Table
      Macro Values will be taken directly,
      class.station will also be taken directly, but possibly add $StationGascollectors and $StationOrecollectors to it if they serve a purpose
      For Ships it works the following:
      first the template amount for the Objectpurpose is used and is then multiplied or added by the Ship Class number (multi if float less then 1, else added)
      unuseable drones (gascollectors without liquid bay, orecollectors without bulb bay) are filtered out
      same for Stations in Zones without Nebulae or Asteroids (latter when Station Asteroid Mining is implemented)
      null means no Drones are set at all (for Ship Classes or Objectpurposes which dont have/need Drones)
      
      If an Object has not enough Space for all desired Drones the Numbers will be used Proportionally
      
      
      Floats less than 1 are interpreted as percentage of total Drone Space, other Numbers are taken as absolute Value
      -->
      <!-- Special Cases:
      units_size_xl_cargo_hauler_3_macro / Scaldis - is categorized as Trade Ship, but practically its more like a Miner, so assigning Mining Drones here 
      -->
      <param name="drone_loadout" value="table[
      {'$UnitcategoryList'}=[unitcategory.attack, unitcategory.defence, unitcategory.gascollector, unitcategory.orecollector, unitcategory.transport, unitcategory.welder],
      
      {macro.units_size_xl_cargo_hauler_3_macro} = table[{unitcategory.defence}=20, {unitcategory.gascollector}=30, {unitcategory.orecollector}=30, {unitcategory.transport}=30, {unitcategory.welder}=20],
      
      {class.station}=table[{unitcategory.attack}=0.1, {unitcategory.defence}=0.25, {unitcategory.gascollector}=0.1, {unitcategory.orecollector}=0.1, {unitcategory.transport}=0.3, {unitcategory.welder}=0.2],
      {class.ship_xl}=table[{unitcategory.attack}=1.0, {unitcategory.defence}=1.0, {unitcategory.gascollector}=1.0, {unitcategory.orecollector}=1.0, {unitcategory.transport}=1.0, {unitcategory.welder}=1.0],
      {class.ship_l}=table[{unitcategory.attack}=1.0, {unitcategory.defence}=1.0, {unitcategory.gascollector}=1.0, {unitcategory.orecollector}=1.0, {unitcategory.transport}=1.0, {unitcategory.welder}=1.0],
      {class.ship_m}=table[{unitcategory.attack}=0.0, {unitcategory.defence}=0.0, {unitcategory.gascollector}=1.0, {unitcategory.orecollector}=1.0, {unitcategory.transport}=0.0, {unitcategory.welder}=0.0],
      {class.ship_s}=null,
      {class.ship_xs}=null,

      {objectpurpose.trade}=table[{unitcategory.attack}=0, {unitcategory.defence}=15, {unitcategory.gascollector}=0.0, {unitcategory.orecollector}=0.0, {unitcategory.transport}=25, {unitcategory.welder}=10],
      {objectpurpose.fight}=table[{unitcategory.attack}=15, {unitcategory.defence}=15, {unitcategory.gascollector}=0.0, {unitcategory.orecollector}=0.0, {unitcategory.transport}=10, {unitcategory.welder}=20],
      {objectpurpose.build}=table[{unitcategory.attack}=0, {unitcategory.defence}=15, {unitcategory.gascollector}=0.0, {unitcategory.orecollector}=0.0, {unitcategory.transport}=20, {unitcategory.welder}=40],
      {objectpurpose.mine}=table[{unitcategory.attack}=0, {unitcategory.defence}=15, {unitcategory.gascollector}=20, {unitcategory.orecollector}=20, {unitcategory.transport}=20, {unitcategory.welder}=10],
      {objectpurpose.hack}=null,
      {objectpurpose.scan}=null
      ]"/>
      <param name="warelookup" value="table[
      {unitcategory.attack}=[ware.drp_assault],
      {unitcategory.defence}=[ware.drp_interceptor_mk1,ware.drp_interceptor_mk2,ware.drp_intrepid_mk1,ware.drp_intrepid_mk2,ware.drp_overrun_mk1,ware.drp_overrun_mk2],
      {unitcategory.gascollector}=[ware.drp_scoopcollector_mk1,ware.drp_scoopcollector_mk2],
      {unitcategory.orecollector}=[ware.drp_surfaceminer_mk1,ware.drp_surfaceminer_mk2],
      {unitcategory.transport}=[ware.drp_cargolifter],
      {unitcategory.welder}=[ware.drp_construction]
      ]"/>
      <!-- EXP Requirements for Skills:       1 Star       2 Stars     3 Stars      4 Stars       5 Stars     MAX (invisible 6th Star) - currently total Wage so far, but WiP - requirements will change-->
      <param name="experience" value="[ 3000Cr , 10000Cr , 30000Cr , 100000Cr , 300000Cr , 1000000Cr ]"/>
      <!-- Employee Wages - Base is paid every hour, Skill is paid as Percentage based on combinedskill (Danger Bonus is paid every 10min if applicable)
      Wages in Order: [ Base Working, Skill Working, Base Inactive, Skill inactive , Base Danger Bonus, Skill Danger Bonus) -->
      <param name="wage" value="table[
      {entitytype.pilot} = [ 1100Cr , 2200Cr , 0Cr , 0Cr , 1100Cr , 2200Cr ],
      {entitytype.commander} = [ 2700Cr , 5400Cr , 0Cr , 0Cr , 2700Cr , 5400Cr ],
      {entitytype.manager} = [ 4800Cr , 9600Cr , 0Cr , 0Cr , 4800Cr , 9600Cr ],
      {entitytype.engineer} = [ 1300Cr , 2600Cr , 0Cr , 0Cr , 1300Cr , 2600Cr ],
      {entitytype.architect} = [ 3600Cr , 7200Cr , 0Cr , 0Cr , 3600Cr , 7200Cr ],
      {entitytype.marine} = [ 1900Cr , 3800Cr , 0Cr , 0Cr , 1900Cr , 3800Cr ],
      {entitytype.defencecontrol} = [ 5800Cr , 11600Cr , 0Cr , 0Cr , 5800Cr , 11600Cr ],
      {entitytype.specialistagriculture} = [ 12200Cr , 24400Cr , 0Cr , 0Cr , 12200Cr , 24400Cr ],
      {entitytype.specialistpowerstorage} = [ 16800Cr , 33600Cr , 0Cr , 0Cr , 16800Cr , 33600Cr ],
      {entitytype.specialistfood} = [ 15700Cr , 31400Cr , 0Cr , 0Cr , 15700Cr , 31400Cr ],
      {entitytype.specialistchemical} = [ 18500Cr , 37000Cr , 0Cr , 0Cr , 18500Cr , 37000Cr ],
      {entitytype.specialistprecision} = [ 19500Cr , 39000Cr , 0Cr , 0Cr , 19500Cr , 39000Cr ],
      {entitytype.specialistweapons} = [ 22000Cr , 44000Cr , 0Cr , 0Cr , 22000Cr , 44000Cr ],
      {entitytype.specialistpharmaceuticals} = [ 14700Cr , 29400Cr , 0Cr , 0Cr , 14700Cr , 29400Cr ],
      {entitytype.specialistmetals} = [ 14500Cr , 29000Cr , 0Cr , 0Cr , 14500Cr , 29000Cr ],
      {entitytype.specialistgeophysics} = [ 12800Cr , 25600Cr , 0Cr , 0Cr , 12800Cr , 25600Cr ],
      {entitytype.specialistsurfacesystems} = [ 23200Cr , 46400Cr , 0Cr , 0Cr , 23200Cr , 46400Cr ],
      {entitytype.specialistpowersupply} = [ 21000Cr , 42000Cr , 0Cr , 0Cr , 21000Cr , 42000Cr ],
      {entitytype.specialistaquatics} = [ 11500Cr , 23000Cr , 0Cr , 0Cr , 11500Cr , 23000Cr ]
      ]"/>
    </category>
  </add>
</diff>
  <!--/scriptparams>
</parameters-->