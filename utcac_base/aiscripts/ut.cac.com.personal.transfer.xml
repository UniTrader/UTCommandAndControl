<?xml version="1.0" encoding="UTF-8" ?>
<aiscript name="ut.cac.com.personal.transfer" version="30" priority="10" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://utnas/~unitrader/XRebirthxsds/aiscripts.xsd">
  <!--
  by  UniTrader

  Script to handle Transfers of Personal to a certain Place and assign their new Job (or set them on Standby properly)
  
  Intended to be used together with md.UT_CAC_Events.Change_Workplace (used to finalize the Workplace change)
  -->
  <params>
    <param name="params" default="false" comment="pass a single Table filled with the wanted param Values here to make calls via list possible (always has priority)"/>
    <param name="destination" default="null" comment="New Workplace OBJECT. if you also want a specific Dock then pass it as dock"/>
    <param name="dock" default="null" comment="The Dock the Entity should be on finally. Primarily intended for Standby on Shipyards, defaults to Admin Dock (Stations) or Landing Pad (Ships). 'random' also supported. (maybe support tags?)"/>
    <param name="job" default="'standby'" comment="the Job the NPC should perform when arrived. Will set the existing one to Standby if its replacing one. custom is also available to pass a new defaultorders Script and entitytype directly"/>
    <param name="new_type" default="null" comment="if the new Job is not directly implemented in this Script pass the new fitting entity type here."/>
    <param name="new_defaultorders" default="null" comment="New defaultorders Scripts table. used in the case of a custom next job."/>
  </params>
  <init>
      <!-- first decode the $params to the Variables -->
      <do_if value="$params">
        <do_if value="$params.$destination?">
          <set_value name="$destination" exact="$params.$destination"/>
        </do_if>
        <do_if value="$params.$dock?">
          <set_value name="$dock" exact="$params.$dock"/>
        </do_if>
        <do_if value="$params.$job?">
          <set_value name="$job" exact="$params.$job"/>
        </do_if>
        <do_if value="$params.$new_type?">
          <set_value name="$new_type" exact="$params.$new_type"/>
        </do_if>
        <do_if value="$params.$new_defaultorders?">
          <set_value name="$new_defaultorders" exact="$params.$new_defaultorders"/>
        </do_if>
      </do_if>
  </init>
  <interrupts>
  </interrupts>
  <attention min="unknown">
    <actions>
      <!-- Validate Input and get missing Values -->
      <do_if value="not $destination.exists">
        <debug_text filter="error" text="'%1 %2 Destination does not exist - aborting!'.[this.name,this.container.name]"/>
        <return/>
      </do_if>
      <do_if value="$destination.isclass.ship_s or $destination.isclass.ship_m">
        <debug_text filter="error" text="'%1 %2 Destination is S or M Ship, not implemented yet - aborting!'.[this.name,this.container.name]"/>
        <!-- Planned: in this case let the Transfer Ship and the Target Ship dock at the same Station and Transfer there
        in case of Travel with Big Ships use Transport Drone to Transfer to exchange Station -->
        <return/>
      </do_if>
      
      <!-- Get Target Dock -->
        <do_if value="typeof $dock == datatype.string">
          <do_if value="$dock == 'random'">
            <find_dock_location name="$dock" container="$destination" size="tag.size_p" numfreeactorslots="1" />
          </do_if>
          <do_elseif value="$dock == 'build'">
            <find_dock_location name="$dock" container="$destination" size="tag.size_p" dockpopulationtype="dockpopulationtype.build" numfreeactorslots="1" />
          </do_elseif>
          <do_elseif value="$dock == 'trade'">
            <find_dock_location name="$dock" container="$destination" size="tag.size_p" dockpopulationtype="dockpopulationtype.trade" numfreeactorslots="1" />
          </do_elseif>
          <do_elseif value="$dock == 'drones'">
            <find_dock_location name="$dock" container="$destination" size="tag.size_p" dockpopulationtype="dockpopulationtype.drones" numfreeactorslots="1" />
          </do_elseif>
          <do_elseif value="$dock == 'ships'">
            <find_dock_location name="$dock" container="$destination" size="tag.size_p" dockpopulationtype="dockpopulationtype.ships" numfreeactorslots="1" />
          </do_elseif>
          <do_elseif value="$dock == 'repair'">
            <find_dock_location name="$dock" container="$destination" size="tag.size_p" dockpopulationtype="dockpopulationtype.repair" numfreeactorslots="1" />
          </do_elseif>
          <do_elseif value="$dock == 'ammo'">
            <find_dock_location name="$dock" container="$destination" size="tag.size_p" dockpopulationtype="dockpopulationtype.ammo" numfreeactorslots="1" />
          </do_elseif>
          <do_elseif value="$dock == 'bar'">
            <find_dock_location name="$dock" container="$destination" size="tag.size_p" dockpopulationtype="dockpopulationtype.bar" numfreeactorslots="1" />
          </do_elseif>
          <do_elseif value="$dock == 'administrative'">
            <find_dock_location name="$dock" container="$destination" size="tag.size_p" dockpopulationtype="dockpopulationtype.administrative" numfreeactorslots="1" />
          </do_elseif>
          <do_else>
            <!-- Fallback: Random Dock -->
            <find_dock_location name="$dock" container="$destination" size="tag.size_p" numfreeactorslots="1" />
          </do_else>
        </do_if>
        <do_if value="not $dock.exists">
          <!-- use Default Dock on Object on arrival -->
          <set_value name="$dock" exact="null"/>
        </do_if>
        
        <!-- save current entity type in case it has to be restored-->
        <set_value name="$previoustype" exact="this.type"/>
        
        <!-- wait till Player has finished Conversation, its annoying when NPC just disappears -->
        <do_if value="player.isinconversation">
          <wait>
            <interrupt>
              <conditions>
                <event_conversation_finished actor="this"/>
              </conditions>
            </interrupt>
          </wait>
          <wait exact="2s"/>
        </do_if>
        
        
        <do_if value="$destination == this.container">
          <debug_text filter="general" text="'%1 %2 Already on right Container, no Transport needed'.[this.name,this.container.name]"/>
          <debug_text filter="general" text="'further helpful Infos to refine this:\n$destination: %1 ; $dock: %2 ; $dock.component: %3\nthis.container: %4, this.room: %5'.[@$destination, @$dock, @$dock.component, @this.container , @this.room]"/>
          
        </do_if>
        <!-- Get Means of Transport and use it to Destination -->
        <!-- Get Destination of Ships in current Zone and if one fits - Hitchhike -->
        <!-- Use Unused Ship at current Container and fly it to Destination -->
        <do_else>
          <!-- Simple fallback case: Create a Temp Ship (base it on Cluster?), fly it to Destination,  Destroy it -->
          <set_entity_type entity="this" type="entitytype.pilot" comment="convert to an type who is able to pilot ships"/>
          <debug_text filter="general" text="'%1 %2 Creating Transport Ship'.[this.name,this.container.name]"/>
          <create_ship name="$transport_ship" dock="this.container" capturable="false" sellable="false" group="albion_light_fighter">
            <pilot actor="this"/>
          </create_ship>
          <debug_text filter="general" text="'%1 %2 Created Transport Ship, Results:\nTransport Ship: %3 ; Pilot: %4'.[this.name,this.container.name,@$transport_ship.name,@this.ship.pilot.name]"/>
          
          <!-- Fly Ship to Destination -->
          <run_script name="'move.generic'">
            <param name="destination" value="$destination" />
            <param name="endintargetzone" value="true" />
          </run_script>
          <debug_text filter="general" text="'%1 %2 Moved to Destination Zone'.[this.name,this.container.name]"/>
          
          <!-- (attempt to) Dock at Destination -->
          <run_script name="'move.dockat'" result="$dockresult">
            <param name="destination" value="$destination" />
          </run_script>
          <debug_text filter="general" text="'%1 %2 Docked at Target: %3'.[this.name,this.container.name,$dockresult]"/>
          
          <!-- Assuming we have docked at Destination - transfer NPC, Destroy Ship, move to common Finish Part -->
          <debug_text filter="general" text="'%1 %2 Moving Actor into Target, Destroying Ship'.[this.name,this.container.name]"/>
          <set_value name="$success" exact="false"/>
          <do_if value="$dock? and $dock.exists">
            <add_actor_to_platform actor="this" dockingbay="$dock.component" result="$success" />
          </do_if>
          <do_if value="not $success">
            <add_actor_to_room actor="this" object="$destination" result="$success" />
          </do_if>
          <do_if value="not $success">
            <!-- ok, adding actor to originally intended platform did not work, try to find another one -->
            <find_dock_location container="$destination" name="$dock" numfreeactorslots="1" size="player.primaryship.docksize" dockpopulationtype="dockpopulationtype.administrative" />
            <do_if value="not $dock">
              <find_dock_location container="$destination" name="$dock" numfreeactorslots="1" size="player.primaryship.docksize" />
            </do_if>
            <do_if value="$dock">
              <add_actor_to_platform actor="this" dockingbay="$dock.component" result="$success" />
            </do_if>
          </do_if>
          <do_if value="not $success">
            <debug_text filter="error" text="'%1 %2 Moving Actor into Destination was not successful. $dock: %3 $destination: %4'.[this.name,this.container.name,@$dock.name,@$destination.name]"/>
            <return/>
          </do_if>
          <destroy_object object="$transport_ship" explosion="false"/>
        </do_else>
        
        <!-- Finalize - remove current Control Entity, set as new Control Entity and change defaultorders Script -->
        <do_if value="$job == 'captain'">
          <set_entity_type entity="this" type="entitytype.commander"/>
          <do_if value="$destination.pilot.exists">
            <!-- Captain already present - let new Captain do a soft takeover -->
            <do_if value="$destination.pilot.$orderlist?">
              <signal_objects object="$destination.pilot" param="'new order'" param2="table[$displayname='Handing over Job to %1'.[this.name],$script='ut.cac.com.personal.handover',$successor=this,$interruptable=false]"/>
            </do_if>
            <do_else>
              <!-- ToDo: Vanilla Takeover -->
            </do_else>
            <wait>
              <interrupt>
                <conditions>
                 <event_object_signalled object="this" param="'ready for takeover'"/> 
                </conditions>
                <actions>
                  <set_value name="this.$orderlist" exact="event.param2"/>
                  <set_value name="this.$ut_cac" exact="event.param3"/>
                </actions>
              </interrupt>
            </wait>
          </do_if>
          <assign_pilot actor="this" object="$destination"/>
          <set_value name="this.$ut_cac.$defaultorders" exact="table[$script='ut.cac.orders.captain.default']"/>
        </do_if>
        <do_elseif value="$job == 'manager'">
          <set_entity_type entity="this" type="entitytype.manager"/>
          <do_if value="$destination.tradenpc.exists">
            <!-- Captain already present - let new Captain do a soft takeover -->
            <do_if value="$destination.tradenpc.$orderlist?">
              <signal_objects object="$destination.tradenpc" param="'new order'" param2="table[$displayname='Handing over Job to %1'.[this.name],$script='ut.cac.com.personal.handover',$successor=this,$interruptable=false]"/>
            </do_if>
            <do_else>
              <!-- ToDo: Vanilla Takeover -->
            </do_else>
            <wait>
              <interrupt>
                <conditions>
                 <event_object_signalled object="this" param="'ready for takeover'"/> 
                </conditions>
                <actions>
                  <set_value name="this.$orderlist" exact="event.param2"/>
                  <set_value name="this.$ut_cac" exact="event.param3"/>
                </actions>
              </interrupt>
            </wait>
          </do_if>
          <assign_trade_manager actor="this" object="$destination"/>
          <set_value name="this.$ut_cac.$defaultorders" exact="table[$script='ut.cac.orders.manager.default']"/>
        </do_elseif>
        <do_elseif value="$job == 'pilot'">
          <set_entity_type entity="this" type="entitytype.pilot"/>
          <!-- not properly implemented yet -->
          <do_if value="$destination.pilot.exists">
            <!-- Pilot already present - let new Pilot do a soft takeover -->
            <do_if value="$destination.pilot.$orderlist?">
              <signal_objects object="$destination.pilot" param="'new order'" param2="table[$displayname='Handing over Job to %1'.[this.name],$script='ut.cac.com.personal.handover',$successor=this,$interruptable=false]"/>
            </do_if>
            <do_else>
              <!-- ToDo: Vanilla Takeover -->
            </do_else>
            <wait>
              <interrupt>
                <conditions>
                 <event_object_signalled object="this" param="'ready for takeover'"/> 
                </conditions>
                <actions>
                  <set_value name="this.$orderlist" exact="event.param2"/>
                  <set_value name="this.$ut_cac" exact="event.param3"/>
                </actions>
              </interrupt>
            </wait>
          </do_if>
          <assign_pilot actor="this" object="$destination"/>
          <set_value name="this.$ut_cac.$defaultorders" exact="table[$script='ut.cac.orders.captain.default']"/><!-- ToDo: Seperate Defaultorders Script for Pilot -->
        </do_elseif>
        <do_elseif value="$job == 'defense'">
          <set_entity_type entity="this" type="entitytype.defencecontrol"/>
          <!-- ToDo: Figure out how to convert this Script in something Orderlist-compatible or how to restart the other employees -->
          <do_if value="$destination.defencenpc.exists">
            <!-- DO already present -  soft takeover-->
            <do_if value="$destination.defencenpc.$orderlist?">
              <signal_objects object="$destination.defencenpc" param="'new order'" param2="table[$displayname='Handing over Job to %1'.[this.name],$script='ut.cac.com.personal.handover',$successor=this,$interruptable=false]"/>
            </do_if>
            <do_else>
              <!-- ToDo: Vanilla Takeover -->
            </do_else>
            <wait>
              <interrupt>
                <conditions>
                 <event_object_signalled object="this" param="'ready for takeover'"/> 
                </conditions>
                <actions>
                  <set_value name="this.$orderlist" exact="event.param2"/>
                  <set_value name="this.$ut_cac" exact="event.param3"/>
                </actions>
              </interrupt>
            </wait>
          </do_if>
          <assign_defence_manager actor="this" object="$destination"/>
          <start_script object="this" name="'ut.cac.com.defense.main'"/>
          <set_value name="this.$ut_cac.$defaultorders" exact="table[$script='ut.cac.orders.defense.default']"/>
        </do_elseif>
        <do_elseif value="$job == 'engineer'">
          <set_entity_type entity="this" type="entitytype.engineer"/>
          <!-- related Scripts dont exist yet -->
          <do_if value="$destination.engineer.exists">
            <!-- destination already has a (primary) Engineer - soft takeover -->
            <do_if value="$destination.engineer.$orderlist?">
              <signal_objects object="$destination.engineer" param="'new order'" param2="table[$displayname='Handing over Job to %1'.[this.name],$script='ut.cac.com.personal.handover',$successor=this,$interruptable=false]"/>
            </do_if>
            <do_else>
              <!-- ToDo: Vanilla Takeover -->
            </do_else>
            <wait>
              <interrupt>
                <conditions>
                 <event_object_signalled object="this" param="'ready for takeover'"/> 
                </conditions>
                <actions>
                  <set_value name="this.$orderlist" exact="event.param2"/>
                  <set_value name="this.$ut_cac" exact="event.param3"/>
                </actions>
              </interrupt>
            </wait>
          </do_if>
          <assign_engineer actor="this" object="$destination"/>
          <set_value name="this.$ut_cac.$defaultorders" exact="table[$script='ut.cac.orders.engineer.default']"/>
        </do_elseif>
        <do_elseif value="$job == 'architect'">
            <set_entity_type entity="this" type="entitytype.architect"/>
          <do_if value="$destination.architect.exists">
            <!-- destination already has an Architect - soft takeover -->
            <do_if value="$destination.architect.$orderlist?">
              <signal_objects object="$destination.architect" param="'new order'" param2="table[$displayname='Handing over Job to %1'.[this.name],$script='ut.cac.com.personal.handover',$successor=this,$interruptable=false]"/>
            </do_if>
            <do_else>
              <!-- ToDo: Vanilla Takeover -->
            </do_else>
            <wait>
              <interrupt>
                <conditions>
                 <event_object_signalled object="this" param="'ready for takeover'"/> 
                </conditions>
                <actions>
                  <set_value name="this.$orderlist" exact="event.param2"/>
                  <set_value name="this.$ut_cac" exact="event.param3"/>
                </actions>
              </interrupt>
            </wait>
          </do_if>
          <assign_architect actor="this" object="$destination"/>
          <set_value name="this.$ut_cac.$defaultorders" exact="table[$script='ut.cac.orders.architect.default']"/>
        </do_elseif>
        <do_elseif value="$job == 'tradeagent'">
          <set_entity_type entity="this" type="entitytype.architect" comment="entitytype.droneoperator"/>
          <do_if value="$destination.hastradesubscription">
            <signal_objects object="$destination" param="'trade agent handover'" param2="table[$displayname='Handing over Job to %1'.[this.name],$script='ut.cac.com.personal.handover',$successor=this,$interruptable=false]"/>
            <wait>
              <interrupt>
                <conditions>
                  <event_object_signalled object="this" param="'ready for takeover'"/> 
                </conditions>
                <actions>
                  <set_value name="this.$orderlist" exact="event.param2"/>
                  <set_value name="this.$ut_cac" exact="event.param3"/>
                </actions>
              </interrupt>
            </wait>
          </do_if>
          <set_value name="this.$ut_cac.$defaultorders" exact="table[$script='ut.cac.orders.tradeagent.default']"/>
        </do_elseif>
        
        <!-- so far unused assignments:
          <assign_boarding_commander actor="this" object="$destination"/>
          <assign_control_entity actor="this" object="$destination"/>
        -->
        
        <!-- Rest of the Personal Transfer is handled in the md.UT_CAC_Events.Change_Workplace Cue (should have been Signalled/prepared before to wait till the Actor arrives at his Destination) -->
        <do_elseif value="$job == 'standby'">
          <set_entity_type entity="this" type="entitytype.lawenforcement"/>
        </do_elseif>
        <do_elseif value="$job == 'standby captain'">
          <set_entity_type entity="this" type="entitytype.commander"/>
        </do_elseif>
        <do_elseif value="$job == 'standby manager'">
          <set_entity_type entity="this" type="entitytype.manager"/>
        </do_elseif>
        <do_elseif value="$job == 'standby defense'">
          <set_entity_type entity="this" type="entitytype.defencecontrol"/>
        </do_elseif>
        <do_elseif value="$job == 'standby engineer'">
          <set_entity_type entity="this" type="entitytype.engineer"/>
        </do_elseif>
        <do_elseif value="$job == 'standby architect'">
          <set_entity_type entity="this" type="entitytype.architect"/>
        </do_elseif>
        <do_elseif value="$job == 'standby tradeagent'">
          <set_entity_type entity="this" type="entitytype.architect" comment="entitytype.droneoperator"/>
        </do_elseif>
        <!-- custom case -->
        <do_elseif value="$job == 'custom'">
          <set_entity_type entity="this" type="$new_type"/>
        </do_elseif> 
        <do_else>
          <set_entity_type entity="this" type="$previoustype"/>
        </do_else>
      </actions>
  </attention>
  <on_abort>
  </on_abort>
</aiscript>
