<?xml version="1.0" encoding="UTF-8"?>
<aiscript name="ut.cac.com.defense.main" version="30" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://utnas/~unitrader/XRebirthxsds/aiscripts.xsd">
  <!--
Main Script for the Defense Officer - he wont use an Orderlist because he has to react to many diffrent situations, not completing one task after another like Architect, Captain, Engineer and Manager can do.
Core Point of this Script is efficient usage of available Weapons, Drones and also coordinating Allies nearby.

Main Modes, in order from lowest to highest priority:
#1 Battlestate Green - no Enemies in Radar Range:
=> Weapons inactive
=> Drones are usually Docked, but may be sent out to scout the nearby Area (mostly for atmosphere)
=> Listening to Enemy-in-sight-Events (no active search, i think Signals are better for performance)
=> PLANNED: Listen to global Reinforcement Request Signals, and if incoming signal Captain to intervene
=> PLANNED: if heavily damaged possibly execute Repair Script for single component during this Period to help the Engineer speeding up Repairs (will not be as good as the Engineer himself though)

#2 Battlestate Yellow - Enemies in Radar Range, but not near Combat Range (triggered by Radar scan)
=> Weapons Active
=> Drones are launched into formation around Ship to stay standby (possibly start some to take out smaller attacking groups or at least distract them)
=> Incoming Missiles are picked on by standby drones in rotation
=> Passive Search for Enemies to have Target List at hand when needed (sorted in Primary Target, Prio Targets and other Targets)
=> PLANNED: if missile Defense is over-saturated possibly signal nearby Allies for support/cover against incoming missiles -> unneeded
=> PLANNED: Possibly start a prophylactic slow charge if low on Jump Fuel? (needs coordination with Captain)
=> PLANNED: Coordinate/prepare Long-Range Attack with Captain

#3 Battlestate Red - In Combat, either triggered by Weapons Range or by Attacked Event
=> Paint intentional Attackers Red for your Faction (possibly use the default tolerance system if possible)
=> Weapons Active
=> Most Drones engage enemies in a coordinated manner (when enemy is shot check for nearby other one, if none is found return to standby)
=> Remaining Drones stand by for missile Defense
=> Active and more aggresive Search for Enemies (sorted in Primary Target, Prio Targets and other Targets) => Passive Search until few Targets in Range remain lessen CPU Load
=> Listen for Ceasefire Events from Attackers to (temporarily) exclude them from the Target List (will not be used initially)
=> PLANNED: if missile Defense is over-saturated possibly signal nearby Allies for support/cover against incoming missiles

=> Additionally Travel Signals will also be listened to to prevent Drone Launch shortly before Travel and to recall Drones in time

Notes to certain Features:
=> Ceasefire events:
> Checks line-of-sight immediately and possibly ceases fire completely for a moment to update target list
> Will make Targets blue (temporarily if enemy, restore temp rep boost if friendly)
> has to be verified by the DO
> DO will also send it and cease fire himself when detecting received FF 
> Reasons for event and likelyhood of sucess:
Ships being Boarded by an Ally (works always, no rep change, stays for the duration of the boarding op) -will not be used initially
Friendly Fire (before red) (always works if target is still blue; increases tolerance before turning red for a couple of seconds; might cost a bit rep, but not turn it to enemy)
Friendly Fire (after red) (faction rep dependent; will decrease perma rep minimally, but not below neutral where it will stop to work at all; will only work once per hour, but is permanent)
Hack/Fake (Planned; Small/Skill based chance for sucess; will revert immediately after a short cooldown or on continued Attack)

=> Drones
> Drones will be sent against (strong) incoming missiles one after another
> if Dangerous Missiles get in Point Defense Weapons Range of the mother Ship Drones will also try to Kamikaze into them
> when incoming missiles have roughly the same speed as the drone or faster each drone only makes one attempt to shoot them, if it fails a fresh drone is sent
> They will also be sent in Groups against single small Targets, prefferably in a way that keeps them together
> Drones will attempt to stay inside the Capships main Weapons Range and return there if they stray too far


===>>> ToDo major Points:
> Ammo Restock (note: add Naming Expression, too)


Defensemodes regulate how active the Ship reacts to enemies:
4 -> shoot everything red in sight
3 -> shoot everything red in sight after being hit
2 -> shoot only Targets which hit us (or fired missiles at us)
1 -> only defend against Incoming Missiles, no shooting Enemies
0 -> no reaction at all
-->

  <params>
    <param name="params" default="false" comment="pass a single Table filled with the wanted param Values here to make calls via list possible (always has priority)"/>
  </params>
  <init>
    <!-- Create all internally used Groups -->
    <create_group groupname="$enemies_g"/>
    <set_value name="$enemies_t" exact="table[]"/>
    <create_group groupname="$drones_missiledefense" comment="most maneuverable Drones"/>
    <create_group groupname="$drones_attack" comment="Drones with Heavy armanements, not suited for dogfights"/>
    <create_group groupname="$drones_defense" comment="all remaining drones"/>
    <create_group groupname="$alldrones" comment="all drones"/>
    <set_value name="$primarytarget" exact="null"/>
    <set_value name="$droneratio" exact="1.0" comment="ratio of drones which should be launched - depends on Travel preperations (all if no fast travel is planned, 25% in boost prep, 10% in jump prep, 0% when starting jump/boost)"/>
    
    <!-- for debug purposes: make Groups view-able in debug menu -->
    <set_value name="$params.$groups" exact="table[$missiledef=$drones_missiledefense,$defense=$drones_defense,$attack=$drones_attack,$all=$alldrones]"/>
    
    <!-- Set Value for exitonneworder handler (static in this case since this is by design an Endless Script) -->
    <set_value name="$exitonneworder" exact="true"/>
    
    <!-- Set up Values used Internally, but which shall be exposed -->
    <set_value name="this.$ut_cac.$defensemode" exact="4"/>
    
    <!-- create GV to store empty Groups -->
    <do_if value="not global.$unused_groups?">
      <set_value name="global.$unused_groups" exact="[]"/>
    </do_if>
  </init>
  <interrupts>
    <handler ref="ut_cac_exitonneworder"/>
    <handler comment="Attacked, enemy found or incoming missile - intercept and go into battlestate red/yellow">
      <conditions>
        <check_any>
          <check_all>
            <check_any>
              <event_object_attacked object="this.container"/>
              <event_object_attacked group="$alldrones"/>
            </check_any>
            <!-- Event for the specified object being attacked (object = attacked object, param = attacker, param2 = kill method, param3 = attacked component) -->
            <check_value value="this.$ut_cac.$defensemode ge 2"/>
            <check_value value="this.container.mayattack.{event.param}"/>
            <check_value value="not $enemies_g.indexof.{event.param}"/>
            <check_value value="not @global.$utcac.$enemy_ignorelist.indexof.{event.param}"/>
          </check_all>
          <check_all>
            <event_object_enemy_found object="this.container"/>
            <check_value value="this.$ut_cac.$defensemode ge ( 3 + $battlestate == 'green' )" comment="Defensemode 4 adds all Enemies, Defensemode 3 only when already in Battle"/>
            <check_value value="this.container.distanceto.{event.param} lt this.container.maxradarrange and not event.param.ismasstraffic"/>
            <check_value value="not $enemies_g.indexof.{event.param}"/>
            <check_value value="not @global.$utcac.$enemy_ignorelist.indexof.{event.param}"/>
          </check_all>
          <check_all>
            <check_any>
              <!-- Event for when a missile is launched at the specified object (object = target object, param = target component, param2 = missile, param3 = missile source) -->
              <event_object_incoming_missile object="this.container"/>
              <event_object_signalled object="this.container" param="'missile drone defense failed'" comment="Not Yet Implemented - will probably be dropped"/>
            </check_any>
            <check_value value="this.$ut_cac.$defensemode ge 1"/>
          </check_all>
        </check_any>
      </conditions>
      <actions>
        <!-- Missile Intercept Code in case a Missile was launched at us (attacker is event.param 3 in this case) -->
        <do_if value="event.name == 'event_object_incoming_missile'">
          <!-- rate danger of Missile and add to prio Targets and/or send interceptor Drones -->
          <!-- for now just send one Interceptor Drone per missile if avialable -->
          <do_if value="$drones_missiledefense.count">
            <set_value name="$index" exact="1"/>
            <do_all exact="$drones_missiledefense.count" counter="$i">
              <do_if value="$drones_missiledefense.{$i}.distanceto.{event.param2} lt $drones_missiledefense.{$index}.distanceto.{event.param2}">
                <set_value name="$index" exact="$i"/>
              </do_if>
            </do_all>
            <set_value name="$randominterceptors" exact="if this.container.distanceto.{event.param2} gt this.container.size * 1.5 then 0 else [ 10 , $drones_missiledefense.count / 3 ].min"/>
            <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Launching Missile Defense Drone %3 plus %7 random ones to intercept %5 (start distance %6 ) - from set \n%4'.[this.name,this.container.name,$drones_missiledefense.{$index},$drones_missiledefense,event.param2,this.container.distanceto.{event.param2},$randominterceptors]"/>
            <signal_objects object="$drones_missiledefense.{$index}" param="'execute order'" param2="table[$script='ut.cac.com.drone.singleattackrun',$target=event.param2,$kamikaze=true,$debug_out_all=true]"/>
            <do_all exact="$randominterceptors">
              <set_value name="$newinterceptor" exact="$drones_missiledefense.random"/>
              <signal_objects object="$newinterceptor" param="'execute order'" param2="table[$script='ut.cac.com.drone.singleattackrun',$target=event.param2,$kamikaze=true]"/>
              <remove_from_group object="$newinterceptor" group="$drones_missiledefense" comment="this is also handled in the Drone Script, but required here that we dont pick the same drone twice"/>
            </do_all>
          </do_if>
          <do_else>
            <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Missile lauched against us, but no interceptors available - defending using Turrets only'.[this.name,this.container.name]"/>
          </do_else>
          <add_to_group groupname="$enemies_g" object="event.param2"/>
          <do_if value="not $enemies_g.indexof.{event.param3} and this.$ut_cac.$defensemode ge 2 and not @global.$utcac.$enemy_ignorelist.indexof.{event.param}">
            <set_value name="$attacker" exact="event.param3"/>
          </do_if>
          <do_else>
            <set_turret_targets object="this.container" preferredtarget="$primarytarget" target="$enemies_g.list"/>
          </do_else>
        </do_if>
        <do_else>
          <set_value name="$attacker" exact="event.param"/>
        </do_else>
        <!-- ignore Friendly Fire from own faction  -->
        <do_if value="$attacker? and $attacker.owner == this.owner">
          <remove_value name="$attacker"/>
        </do_if>
        <!-- Enemy Intercept Code to Intercept Attackers (who either shot a Missile or shot at us -->
        <do_if value="$attacker? and this.container.distanceto.{$attacker} lt this.container.maxradarrange and this.container.mayattack.{$attacker}">
          <add_to_group groupname="$enemies_g" object="$attacker"/>
          <!-- This Snippet is just because i see a possible memory leak here - <create_group/> alone should be enough -->
          <do_if value="not $enemies_t.{$attacker}?">
            <do_if value="global.$unused_groups.{1}?">
              <do_if value="typeof global.$unused_groups.{1} == datatype.group and global.$unused_groups.{1}.count == 0">
                <set_value name="$newgroup" exact="global.$unused_groups.{1}"/>
                <remove_value name="global.$unused_groups.{1}"/>
              </do_if>
              <do_else>
                <debug_text filter="error" text="'Group got somehow cleaned up? or has members?\n%1'.[global.$unused_groups]"/>
                <remove_value name="global.$unused_groups.{1}"/>
                <create_group groupname="$newgroup"/>
              </do_else>
            </do_if>
            <do_else>
              <create_group groupname="$newgroup"/>
            </do_else>
            <set_value name="$enemies_t.{$attacker}" exact="$newgroup"/>
          </do_if>
          <!-- ##### Check if Attack was intentional and make attacker Enemy -->
          <do_if value="event.name == 'event_object_attacked' or event.name == 'event_object_incoming_missile'">
            <!-- send some drones after the Attacker and go into red alert -->
            <do_if value="$enemies_t.{$attacker}.count le 3 and $drones_defense.count">
              <do_if value="$attacker.isclass.{[class.drone,class.ship_xs,class.ship_s,class.ship_m]}">
                <set_value name="$hp" exact="$attacker.maxhull + $attacker.maxshield"/>
                <!-- subtract DPS of already attacking Drones -->
                <do_all exact="$enemies_t.{$attacker}.count" counter="$i">
                  <set_value name="$hp" operation="subtract" exact="$enemies_t.{$attacker}.{$i}.dps.all"/>
                </do_all>
                <do_while value="$drones_defense.count and $hp gt 0 and $enemies_t.{$attacker}.count le 3">
                  <set_value name="$newinterceptor" exact="$drones_defense.random"/>
                  <do_if value="$newinterceptor.isoperational">
                    <set_value name="$hp" operation="subtract" exact="$newinterceptor.dps.all"/>
                    <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Launching Interceptor %3 to kill %4'.[this.name,this.container.name,$newinterceptor,$attacker.name]"/>
                    <signal_objects object="$newinterceptor" param="'execute order'" param2="table[$script='ut.cac.com.drone.fight',$target=$attacker,$othertargets=true,$interceptgroup=$enemies_t.{$attacker}]"/>
                  </do_if>
                  <remove_from_group object="$newinterceptor" group="$drones_defense" comment="this is also handled in the Drone Script, but required here that we dont pick the same drone twice"/>
                </do_while>
              </do_if>
              <do_else comment="Attacker is a big Ship">
                <!-- we focus only on one Big Ship at once (the prioritytarget), so further big Ships will be ignored for now -->
                <do_if value="not $primarytarget.exists and not $primarytarget.isoperational">
                  <set_value name="$primarytarget" exact="$attacker"/>
                  <do_if value="this.container.distanceto.{$primarytarget} lt 4km" comment="Overrung URVs have 3 km range, plus some bonus">
                    <!-- add some Handling to allow for configurable sub-targets (only attacks main hull for now) -->
                    <signal_objects group="$drones_attack" param="'execute order'" param2="table[$script='ut.cac.com.drone.fight',$target=$primarytarget,$othertargets=true,$interceptgroup=$enemies_t.{$primarytarget}]"/>
                    <!--signal_objects group="$drones_attack" param="'execute order'" param2="table[$script='ut.cac.com.drone.bombcapship',$target=$primarytarget]"/-->
                  </do_if>
                </do_if>
              </do_else>
              <remove_value name="$attacker"/>
              <abort_called_scripts resume="red"/>
            </do_if>
          </do_if>
          <do_else>
            <remove_value name="$attacker"/>
            <abort_called_scripts resume="yellow"/>
          </do_else>
        </do_if>
      </actions>
    </handler>
    <handler comment="Active Scan performed after Sector Changes">
      <conditions>
        <event_object_changed_sector object="this.container"/>
        <check_value value="this.$ut_cac.$defensemode ge 4"/>
      </conditions>
      <actions>
        <!-- signal all Drones pursuing Enemies to return, store group for later usage (might not be needed) -->
        <do_all exact="$enemies_g.count" counter="$i">
          <do_if value="$enemies_t.{$enemies_g.{$i}}? and typeof $enemies_t.{$enemies_g.{$i}} == datatype.group">
            <signal_objects group="$enemies_t.{$enemies_g.{$i}}" param="'return dock'"/>
            <clear_group group="$enemies_t.{$enemies_g.{$i}}"/>
            <append_to_list name="global.$unused_groups" exact="$enemies_t.{$enemies_g.{$i}}"/>
            <remove_value name="$enemies_t.{$enemies_g.{$i}}"/>
          </do_if>
        </do_all>
        <clear_group group="$enemies_g"/>
        <!-- find Enemies in Turret Range (for Battlestate Red) -->
        <find_gravidar_contact groupname="$enemies_g" object="this.container" functional="true" maybeattackedby="this.container" multiple="true">
          <match_distance object="this.container" max="$combatrange"/>
        </find_gravidar_contact>
        <do_if value="$enemies_g.count">
          <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Enemies in Combat Range after Sector Change'.[this.name,this.container.name]"/>
          <abort_called_scripts resume="red"/>
        </do_if>
        <!-- Find Enemies in Radar Range (for Battlestate Yellow) -->
        <find_gravidar_contact groupname="$enemies_g" object="this.container" functional="true" maybeattackedby="this.container" multiple="true">
          <match_distance object="this.container" max="this.container.maxradarrange"/>
        </find_gravidar_contact>
        <do_if value="$enemies_g.count">
          <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Enemies in Radar Range after Sector Change'.[this.name,this.container.name]"/>
          <abort_called_scripts resume="yellow"/>
        </do_if>
        <!-- no Enemies nearby -->
        <abort_called_scripts resume="green"/>
      </actions>
    </handler>
    <handler comment="Clean up Enemies Group when they cease to be a Threat">
      <conditions>
        <check_any>
          <event_object_changed_zone group="$enemies_g"/>
          <event_object_destroyed group="$enemies_g"/>
          <!-- more events which indicate the enemy is gone? -->
        </check_any>
        <check_value value="( not event.object.isoperational ) or this.container.distanceto.{event.object} gt this.container.maxradarrange"/>
      </conditions>
      <actions>
        <remove_from_group group="$enemies_g" object="event.object"/>
          <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Enemy removed: %3 - reason: %4'.[this.name,this.container.name,event.object,event.name]"/>
        <do_if value="$enemies_t.{event.object}? and typeof $enemies_t.{event.object} == datatype.group">
          <signal_objects group="$enemies_t.{event.object}" param="'return formation'"/>
          <!-- store group for later usage - might not be needed -->
          <append_to_list name="global.$unused_groups" exact="$enemies_t.{event.object}"/>
        </do_if>
        <remove_value name="$enemies_t.{event.object}"/>
        <do_if value="$enemies_g.count == 0">
          <abort_called_scripts resume="green"/>
        </do_if>
      </actions>
    </handler>
    <handler comment="travel intent signals and Drone Recall - set Variables for not launching Drones anymore and send Drone Recall Singals">
      <conditions>
        <check_any>
          <event_object_signalled object="this.container" param="'travel aborted'"/>
          <event_object_signalled object="this.container" param="'travel completed'"/>
          <event_object_signalled object="this.container" param="'travel boost prep'"/>
          <event_object_signalled object="this.container" param="'travel boost start'"/>
          <event_object_signalled object="this.container" param="'travel jump prep'"/>
          <event_object_signalled object="this.container" param="'travel jump start'"/>
          <event_object_signalled object="this.container" param="'travel gate prep'"/>
          <event_object_signalled object="this.container" param="'travel gate start'"/>
          <check_all>
            <!-- events for Docking Drones (or drones being Destroyed) before starting Travel -->
            <check_any>
              <event_object_docked group="$alldrones"/>
              <event_object_destroyed group="$alldrones"/>
            </check_any>
            <check_value value="$travel_leader_preparegroup? and $alldrones.count == 0"/>
          </check_all>
          <!-- approaching last waypoint while in prep for boost travel - recall all drones -->
          <check_all>
            <event_object_approaching_waypoint object="this.container" lastwaypoint="true"/>
            <check_value value="$travel_leader_preparegroup?"/>
          </check_all>
        </check_any>
      </conditions>
      <actions>
        <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Travel Intent Signal Received: %3 - %4'.[this.name,this.container.name,event.name,event.param]"/>
        <do_if value="event.param == 'travel aborted' or event.param == 'travel completed'">
          <set_value name="$droneratio" exact="1.0"/>
        </do_if>
        <do_elseif value="event.param == 'travel boost prep'">
          <set_value name="$droneratio" exact="1.00"/>
          <set_value name="$travel_leader_preparegroup" exact="event.param3"/>
          <set_value name="$travel_leader" exact="event.param2.{1}"/>
        </do_elseif>
        <do_elseif value="event.param == 'travel jump prep'">
          <set_value name="$droneratio" exact="0.0"/>
          <signal_objects object="this.container" param="'recall drones'"/>
          <set_value name="$travel_leader_preparegroup" exact="event.param3"/>
          <set_value name="$travel_leader" exact="event.param2.{1}"/>
        </do_elseif>
        <do_elseif value="event.param == 'travel gate prep'">
          <set_value name="$droneratio" exact="0.66"/>
        </do_elseif>
        <do_elseif value="event.param == 'travel gate start'">
          <set_value name="$droneratio" exact="0.0"/>
          <signal_objects object="this.container" param="'recall drones'"/>
        </do_elseif>
        <!--do_elseif value="event.name == 'event_object_signalled'">
          <!- - all remaining Travel Signals - stop launching drones - ->
          <set_value name="$droneratio" exact="0.0"/>
          <signal_objects object="this.container" param="'recall drones'"/>
        </do_elseif-->
        <do_elseif value="event.name == 'event_object_approaching_waypoint'">
          <!-- last waypoint of boost prep - recall everyone -->
          <set_value name="$droneratio" exact="0.0"/>
          <signal_objects object="this.container" param="'recall drones'"/>
        </do_elseif>
        <do_else>
          <!-- Drones returned/destroyed Event - allow travel to continue -->
          <remove_from_group group="$travel_leader_preparegroup" object="this"/>
          <signal_objects object="$travel_leader" param="'preparegroup shrunk'"/>
          <remove_value name="$travel_leader_preparegroup"/>
          <remove_value name="$travel_leader"/>
        </do_else>
        <do_if value="$namingentity.$namereplacement?">
          <set_value name="$namingentity.$namereplacement.$utcac_do_droneratio" exact="'%1'.[$droneratio]"/>
          <signal_objects object="this.container" param="'Object Name Updated'"/>
        </do_if>
        <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Droneratio changed to %3'.[this.name,this.container.name,$droneratio]"/>
        <do_if value="event.name == 'event_object_signalled'" comment="exclude drones returned event">
          <!-- recall Drones so target ratio is reached -->
          <do_if value="$droneratio == 1.0 or $droneratio == 0.0 or this.container.units.{unitcategory.defence}.count == 0" comment="no need to check if all drones should be sent or we have no drones - also complete recal is handled indvidually"/>
          <do_elseif value="1.0 - this.container.availableunits.{unitcategory.defence}.count / this.container.units.{unitcategory.defence}.count gt $droneratio">
            <signal_objects object="this.container" param="'recall drones'" param2=" $droneratio / ( 1.0 - this.container.availableunits.{unitcategory.defence}.count / this.container.units.{unitcategory.defence}.count )"/><!-- signals the ratio of Drones which should be recalled -->
          </do_elseif>
          <do_if value="$battlestate == 'green'">
            <abort_called_scripts/>
          </do_if>
          <do_elseif value="$battlestate == 'yellow'">
            <abort_called_scripts resume="yellow"/>
          </do_elseif>
          <do_elseif value="$battlestate == 'red'">
            <abort_called_scripts resume="red"/>
          </do_elseif>
        </do_if>
      </actions>
    </handler>
  </interrupts>
  <attention min="visible">
    <actions>
      <label name="init"/>
      
      <set_value name="$combatrange" exact="this.container.maxcombatrange.all"/>
      <set_value name="$primarytarget" exact="null"/>
      <set_value name="$ordered_target" exact="null"/>
      
      <!-- Init Vars if Advanced Renaming is installed -->
      <do_if value="@readtext.{5554302}.{1} != '=ReadText5554302-1='">
        <set_value name="$namingentity" exact="if this.container.isclass.station then this.container.tradenpc else this.container.controlentity" comment="update of naming entity"/>
        <do_if value="not $namingentity.$namereplacement?">
          <set_value name="$namingentity.$namereplacement" exact="table[$utcac_do_droneratio=$droneratio]"/>
        </do_if>
        <do_else>
          <set_value name="$namingentity.$namereplacement.$utcac_do_droneratio" exact="$droneratio"/>
        </do_else>
        <signal_objects object="this.container" param="'Object Name Updated'" delay="100ms"/>
      </do_if>
      
      <!-- ######################################################################################################################################################### -->
      <label name="green"/>
      <do_if value="$namingentity.exists and $namingentity.container != this.container">
        <!-- old Namingentity moved - clear its Variables -->
        <remove_value name="$namingentity.$namereplacement.$utcac_do_state"/>
        <remove_value name="$namingentity.$namereplacement.$utcac_do_droneratio"/>
        <signal_objects object="this.container" param="'Object Name Updated'"/>
      </do_if>
      <set_value name="$namingentity" exact="if this.container.isclass.station then this.container.tradenpc else this.container.controlentity" comment="update of naming entity"/>
      <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Battlestate Green, set naming entity to %3'.[this.name,this.container.name,$namingentity.name]"/>
      <do_if value="@$battlestate != 'green'">
        <cease_fire object="this.container"/>
        <stop_shooting object="this.container" slot="tag.primary_slot"/>
        <stop_shooting object="this.container" slot="tag.secondary_slot"/>
        <!--activate_battlestate object="this.container" state="open_hangar"/-->
        <activate_battlestate object="this.container" state="battlestate_jumpprep"/>
        <signal_objects object="this.container" param="'recall drones'"/>
        <leave_formation object="this.container"/>
        <set_value name="$battlestate" exact="'green'"/>
        <do_if value="$namingentity.$namereplacement?">
          <set_value name="$namingentity.$namereplacement.$utcac_do_state" exact="'\033GG'"/>
          <signal_objects object="this.container" param="'Object Name Updated'"/>
        </do_if>
      </do_if>
      
      <wait resume="true"/>
      <!-- what could the DO do when there is nothing else to do? help the Engineer with repairs? -->
      <!-- order supplies? -->
      
      <resume label="green"/>
      <!-- ######################################################################################################################################################### -->
      <label name="yellow"/>
      <!-- check if previous enemies are still in sight and if someone entered our Combatrange (switch to red) -->
      <do_all exact="$enemies_g.count" counter="$i" reverse="true">
        <do_if value="not $enemies_g.{$i}.isoperational or not this.container.mayattack.{$enemies_g.{$i}} or this.container.distanceto.{$enemies_g.{$i}} gt this.container.maxradarrange or @global.$utcac.$enemy_ignorelist.indexof.{$enemies_g.{$i}}">
          <do_if value="$enemies_t.{$enemies_g.{$i}}? and typeof $enemies_t.{$enemies_g.{$i}} == datatype.group">
            <signal_objects group="$enemies_t.{$enemies_g.{$i}}" param="'return formation'"/>
            <clear_group group="$enemies_t.{$enemies_g.{$i}}"/>
            <append_to_list name="global.$unused_groups" exact="$enemies_t.{$enemies_g.{$i}}"/>
          </do_if>
          <remove_value name="$enemies_t.{$enemies_g.{$i}}"/>
          <remove_from_group object="$enemies_g.{$i}" group="$enemies_g"/>
        </do_if>
        <do_elseif value="this.container.distanceto.{$enemies_g.{$i}} lt $combatrange">
          <resume label="red"/>
        </do_elseif>
      </do_all>
      <!-- Scan for (new) Enemies - during Yellow Alert done exlcusively via events -->
      <find_gravidar_contact groupname="$enemies_g" object="this.container" functional="true" maybeattackedby="this.container" multiple="true">
        <match_distance object="this.container" max="this.container.maxradarrange"/>
      </find_gravidar_contact>
      
      <do_if value="$ordered_target.isoperational">
        <add_to_group groupname="$enemies_g" object="$ordered_target"/>
      </do_if>
      <!-- Filter Enemies -->
      
      <do_if value="not $enemies_g.count">
        <resume label="green"/>
      </do_if>
      
      <!-- if not in Battlestate now enter it -->
      <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Battlestate Yellow, Target Group:\n%3'.[this.name,this.container.name,$enemies_g]"/>
      <do_if value="$battlestate != 'yellow'">
        <set_value name="$combatrange" exact="this.container.maxcombatrange.all"/>
        <!--activate_battlestate object="this.container" state="open_hangar"/-->
        <activate_battlestate object="this.container" state="battlestate_yellow"/>
        <set_value name="$battlestate" exact="'yellow'"/>
        <do_if value="$namingentity.$namereplacement?">
          <set_value name="$namingentity.$namereplacement.$utcac_do_state" exact="'\033YY'"/>
          <signal_objects object="this.container" param="'Object Name Updated'"/>
        </do_if>
      </do_if>
      
      <set_value name="$nextenemyscan" min="player.age + 50s" max="player.age + 70s"/>
      
      <do_if value="$ordered_target.isoperational">
        <set_value name="$primarytarget" exact="$ordered_target"/>
      </do_if>
      <do_elseif value="@global.$utcac.$enemy_priority.isoperational and $enemies_g.indexof.{global.$utcac.$enemy_priority}">
        <set_value name="$primarytarget" exact="global.$utcac.$enemy_priority"/>
      </do_elseif>
      <do_elseif value="not $primarytarget.isoperational">
        <set_value name="$primarytarget" exact="$enemies_g.random"/><!-- ToDo: get proper primary Target (this is just a temp measure to prevent an Error) -->
      </do_elseif>
      <set_turret_targets object="this.container" preferredtarget="$primarytarget" target="$enemies_g.list"/>
      
      <do_if value="$droneratio gt 0.0">
        <run_script name="'ut.cac.com.defense.launchdrones'">
          <!-- param name="exittime" value="$nextenemyscan" comment="only performing passive scans in battlestate yellow - drone script doesnt need to return"/-->
          <param name="missiledefense" value="$drones_missiledefense" comment="drone managment group to pass to the Drones"/>
          <param name="attack" value="$drones_attack" comment="drone managment group to pass to the Drones"/>
          <param name="defense" value="$drones_defense" comment="drone managment group to pass to the Drones"/>
          <param name="alldrones" value="$alldrones" comment="drone managment group to pass to the Drones"/>
          <param name="ratio" value="$droneratio" comment="ratio of the total drones to be deployed (from 0.0 to 1.0)"/>
        </run_script>
      </do_if>
      <do_if value="player.age lt $nextenemyscan">
        <!-- if few Enemies are in Radar Range - send them some Drones to clear Radar ASAP -->
        <do_if value="$enemies_g.count lt 5 and $drones_defense.count gt $enemies_g.count * 5">
          <do_all exact="$enemies_g.count" counter="$i">
            <!-- send some drones after the Attacker and go into red alert (check if there is an $enemies_t entry, because if not the target is a missile) -->
            <do_if value="$drones_defense.count and $enemies_t.{$enemies_g.{$i}}?">
              <do_if value="$enemies_g.{$i}.isclass.{[class.drone,class.ship_xs,class.ship_s,class.ship_m]}">
                <set_value name="$hp" exact="$enemies_g.{$i}.maxhull + $enemies_g.{$i}.maxshield"/>
                <!-- subtract DPS of already attacking Drones -->
                <do_all exact="$enemies_t.{$enemies_g.{$i}}.count" counter="$j">
                  <set_value name="$hp" operation="subtract" exact="$enemies_t.{$enemies_g.{$i}}.{$j}.dps.all"/>
                </do_all>
                <set_value name="$sentdrones" exact="0"/>
                <do_while value="$drones_defense.count and $hp gt 0 and $sentdrones lt ( ($enemies_g.count)f - $i / $drones_defense.count )">
                  <set_value name="$newinterceptor" exact="$drones_defense.random"/>
                  <do_if value="$newinterceptor.isoperational">
                    <set_value name="$hp" operation="subtract" exact="$newinterceptor.dps.all"/>
                    <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Launching Interceptor %3 to kill %4'.[this.name,this.container.name,$newinterceptor,$enemies_g.{$i}.name]"/>
                    <signal_objects object="$newinterceptor" param="'execute order'" param2="table[$script='ut.cac.com.drone.fight',$target=$enemies_g.{$i},$othertargets=true,$interceptgroup=$enemies_t.{$enemies_g.{$i}}]"/>
                  </do_if>
                  <remove_from_group object="$newinterceptor" group="$drones_defense" comment="this is also handled in the Drone Script, but required here that we dont pick the same drone twice"/>
                </do_while>
              </do_if>
              <do_else>
                <break/>
              </do_else>
            </do_if>
          </do_all>
        </do_if>
        <wait exact="$nextenemyscan - player.age" resume="true">
          <on_attentionchange>
            <resume label="yellow"/>
          </on_attentionchange>
        </wait>
      </do_if>
      
      <resume label="yellow"/>
      <!-- ######################################################################################################################################################### -->
      <label name="red"/>
      <!-- check if previous enemies are still in sight, and confirm there are enemies in combat range -->
      <do_if value="$ordered_target.isoperational">
        <add_to_group groupname="$enemies_g" object="$ordered_target"/>
      </do_if>
      <do_all exact="$enemies_g.count" counter="$i" reverse="true">
        <do_if value="not $enemies_g.{$i}.isoperational or not this.container.mayattack.{$enemies_g.{$i}} or this.container.distanceto.{$enemies_g.{$i}} gt this.container.maxradarrange or @global.$utcac.$enemy_ignorelist.indexof.{$enemies_g.{$i}}">
          <do_if value="$enemies_t.{$enemies_g.{$i}}? and typeof $enemies_t.{$enemies_g.{$i}} == datatype.group">
            <signal_objects group="$enemies_t.{$enemies_g.{$i}}" param="'return formation'"/>
            <clear_group group="$enemies_t.{$enemies_g.{$i}}"/>
            <append_to_list name="global.$unused_groups" exact="$enemies_t.{$enemies_g.{$i}}"/>
          </do_if>
          <remove_value name="$enemies_t.{$enemies_g.{$i}}"/>
          <remove_from_group object="$enemies_g.{$i}" group="$enemies_g"/>
        </do_if>
        <do_elseif value="not $stay_red? and this.container.distanceto.{$enemies_g.{$i}} lt $combatrange">
          <set_value name="$stay_red"/>
        </do_elseif>
      </do_all>
      
      <!-- Scan for (new) Enemies - Active Scan only performed if no Enemies are in Turret Range anymore  -->
      <do_if value="not $stay_red?">
        <find_gravidar_contact name="$enemies_add" object="this.container" functional="true" maybeattackedby="this.container" multiple="true">
          <match_distance object="this.container" max="$combatrange"/>
        </find_gravidar_contact>
      </do_if>
      
      <do_if value="not @$enemies_add.count and not $stay_red? and not $primarytarget.exists">
        <remove_value name="$enemies_add"/>
        <resume label="yellow"/>
      </do_if>
      <do_elseif value="@$enemies_add.count">
        <add_to_group groupname="$enemies_g" list="$enemies_add"/>
      </do_elseif>
      <remove_value name="$enemies_add"/>
      <remove_value name="$stay_red"/>
      
      <!-- if not already in Battlestate now enter it -->
      <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Battlestate Red, Target Group:\n%3'.[this.name,this.container.name,$enemies_g]"/>
      <do_if value="$battlestate != 'red'">
        <set_value name="$combatrange" exact="this.container.maxcombatrange.all"/>
        <!--activate_battlestate object="this.container" state="close_hangar"/-->
        <activate_battlestate object="this.container" state="battlestate_red"/>
        <set_value name="$battlestate" exact="'red'"/>
        <do_if value="$namingentity.$namereplacement?">
          <set_value name="$namingentity.$namereplacement.$utcac_do_state" exact="'\033RR'"/>
          <signal_objects object="this.container" param="'Object Name Updated'"/>
        </do_if>
      </do_if>
      
      <set_value name="$nextenemyscan" min="player.age + 20s" max="player.age + 30s"/>
      
      <!-- Filter Enemies -->
      
      <do_if value="$ordered_target.isoperational">
        <set_value name="$primarytarget" exact="$ordered_target"/>
      </do_if>
      <do_elseif value="@global.$utcac.$enemy_priority.isoperational and $enemies_g.indexof.{global.$utcac.$enemy_priority}">
        <set_value name="$primarytarget" exact="global.$utcac.$enemy_priority"/>
      </do_elseif>
      <do_elseif value="not $primarytarget.isoperational">
        <set_value name="$primarytarget" exact="$enemies_g.random"/><!-- ToDo: get proper primary Target (this is just a temp measure to prevent an Error) -->
      </do_elseif>
      <set_turret_targets object="this.container" preferredtarget="$primarytarget" target="$enemies_g.list"/>
      
      <do_if value="$droneratio gt 0.0">
        <run_script name="'ut.cac.com.defense.launchdrones'">
          <!--param name="exittime" value="$nextenemyscan" comment="exiting regulary to perform a scan"/-->
          <param name="missiledefense" value="$drones_missiledefense" comment="drone managment group to pass to the Drones"/>
          <param name="attack" value="$drones_attack" comment="drone managment group to pass to the Drones"/>
          <param name="defense" value="$drones_defense" comment="drone managment group to pass to the Drones"/>
          <param name="alldrones" value="$alldrones" comment="drone managment group to pass to the Drones"/>
          <param name="ratio" value="$droneratio" comment="ratio of the total drones to be deployed (from 0.0 to 1.0)"/>
        </run_script>
      </do_if>
      <wait exact="0s" chance="0" comment="just for consistency between attention levels"/>
      <do_if value="player.age lt $nextenemyscan">
        <wait exact="$nextenemyscan - player.age" resume="true">
          <on_attentionchange>
            <resume label="red"/>
          </on_attentionchange>
        </wait>
      </do_if>
      
      
      <resume label="red"/>
      <!-- ######################################################################################################################################################### -->
      <label name="check state"/>
      <do_if value="$battlestate == 'green'">
        <resume label="green"/>
      </do_if>
      <do_if value="$battlestate == 'yellow'">
        <resume label="yellow"/>
      </do_if>
      <do_elseif value="$battlestate == 'red'">
        <resume label="red"/>
      </do_elseif>
      <do_else>
        <debug_text filter="error" text="'%1 %2 no valid Battlestate saved: %3 - resetting'.[this.name,this.container.name,@$battlestate]"/>
        <resume label="init"/>
      </do_else>
    </actions>
  </attention>
  <attention min="unknown">
    <actions>
      <label name="init"/>
      
      <set_value name="$combatrange" exact="this.container.maxcombatrange.all"/>
      <set_value name="$primarytarget" exact="null"/>
      <set_value name="$ordered_target" exact="null"/>
      
      <!-- Init Vars if Advanced Renaming is installed -->
      <do_if value="@readtext.{5554302}.{1} != '=ReadText5554302-1='">
        <set_value name="$namingentity" exact="if this.container.isclass.station then this.container.tradenpc else this.container.controlentity" comment="update of naming entity"/>
        <do_if value="not $namingentity.$namereplacement?">
          <set_value name="$namingentity.$namereplacement" exact="table[$utcac_do_droneratio=$droneratio]"/>
        </do_if>
        <do_else>
          <set_value name="$namingentity.$namereplacement.$utcac_do_droneratio" exact="$droneratio"/>
        </do_else>
        <signal_objects object="this.container" param="'Object Name Updated'" delay="100ms"/>
      </do_if>
      
      <!-- ######################################################################################################################################################### -->
      <label name="green"/>
      <do_if value="$namingentity.exists and $namingentity.container != this.container">
        <!-- old Namingentity moved - clear its Variables -->
        <set_value name="$namingentity.$namereplacement.$utcac_do_state"/>
        <set_value name="$namingentity.$namereplacement.$utcac_do_droneratio"/>
        <signal_objects object="this.container" param="'Object Name Updated'"/>
      </do_if>
      <set_value name="$namingentity" exact="if this.container.isclass.station then this.container.tradenpc else this.container.controlentity" comment="update of naming entity"/>
      <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 OOS Battlestate Green, set naming entity to %3'.[this.name,this.container.name,$namingentity.name]"/>
      <do_if value="@$battlestate != 'green'">
        <leave_formation object="this.container"/>
        <set_value name="$battlestate" exact="'green'"/>
        <do_if value="$namingentity.$namereplacement?">
          <set_value name="$namingentity.$namereplacement.$utcac_do_state" exact="'\033GG'"/>
          <signal_objects object="this.container" param="'Object Name Updated'"/>
        </do_if>
      </do_if>
      
      <wait resume="true"/>
      <!-- what could the DO do when there is nothing else to do? help the Engineer with repairs? -->
      <!-- order supplies? -->
      
      <resume label="green"/>
      <!-- ######################################################################################################################################################### -->
      <label name="yellow"/>
      <!-- check if previous enemies are still in sight and if someone entered our Combatrange (switch to red) -->
      <do_all exact="$enemies_g.count" counter="$i" reverse="true">
        <do_if value="not $enemies_g.{$i}.isoperational or not this.container.mayattack.{$enemies_g.{$i}} or this.container.distanceto.{$enemies_g.{$i}} gt this.container.maxradarrange">
          <do_if value="$enemies_t.{$enemies_g.{$i}}? and typeof $enemies_t.{$enemies_g.{$i}} == datatype.group">
            <clear_group group="$enemies_t.{$enemies_g.{$i}}"/>
            <append_to_list name="global.$unused_groups" exact="$enemies_t.{$enemies_g.{$i}}"/>
          </do_if>
          <remove_value name="$enemies_t.{$enemies_g.{$i}}"/>
          <remove_from_group object="$enemies_g.{$i}" group="$enemies_g"/>
        </do_if>
        <do_elseif value="this.container.distanceto.{$enemies_g.{$i}} lt $combatrange">
          <resume label="red"/>
        </do_elseif>
      </do_all>
      <!-- Scan for (new) Enemies - during Yellow Alert done exlcusively via events - ->
      <find_gravidar_contact groupname="$enemies_g" object="this.container" functional="true" maybeattackedby="this.container" multiple="true">
        <match_distance object="this.container" max="this.container.maxradarrange"/>
      </find_gravidar_contact>
      -->
      
      <!-- Filter Enemies -->
      
      <do_if value="not $enemies_g.count and not $primarytarget.exists">
        <resume label="green"/>
      </do_if>
      
      <!-- if not in Battlestate now enter it -->
      <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 OOS Battlestate Yellow, Target Group:\n%3'.[this.name,this.container.name,$enemies_g]"/>
      <do_if value="$battlestate != 'yellow'">
        <set_value name="$combatrange" exact="this.container.maxcombatrange.all"/>
        <!--activate_battlestate object="this.container" state="open_hangar"/-->
        <activate_battlestate object="this.container" state="battlestate_yellow"/>
        <set_value name="$battlestate" exact="'yellow'"/>
        <do_if value="$namingentity.$namereplacement?">
          <set_value name="$namingentity.$namereplacement.$utcac_do_state" exact="'\033YY'"/>
          <signal_objects object="this.container" param="'Object Name Updated'"/>
        </do_if>
      </do_if>
      
      <set_value name="$nextenemyscan" min="player.age + 20s" max="player.age + 30s"/>
      
      <!-- get primary Target here -->
      <do_if value="$ordered_target.isoperational">
        <set_value name="$primarytarget" exact="$ordered_target"/>
      </do_if>
      <do_elseif value="@global.$utcac.$enemy_priority.isoperational and $enemies_g.indexof.{global.$utcac.$enemy_priority}">
        <set_value name="$primarytarget" exact="global.$utcac.$enemy_priority"/>
      </do_elseif>
      
      <run_script name="'ut.cac.com.defense.launchdrones'" chance="0" comment="just to keep blocking actions consistent with attention levels"/>
      <do_if value="player.age lt $nextenemyscan">
        <wait exact="$nextenemyscan - player.age" resume="true"/>
      </do_if>
      
      <resume label="yellow"/>
      <!-- ######################################################################################################################################################### -->
      <label name="red"/>
      <!-- check if previous enemies are still in sight, and confirm there are enemies in combat range -->
      <do_all exact="$enemies_g.count" counter="$i" reverse="true">
        <do_if value="not $enemies_g.{$i}.isoperational or not this.container.mayattack.{$enemies_g.{$i}} or this.container.distanceto.{$enemies_g.{$i}} gt this.container.maxradarrange">
          <do_if value="$enemies_t.{$enemies_g.{$i}}? and typeof $enemies_t.{$enemies_g.{$i}} == datatype.group">
            <clear_group group="$enemies_t.{$enemies_g.{$i}}"/>
            <append_to_list name="global.$unused_groups" exact="$enemies_t.{$enemies_g.{$i}}"/>
          </do_if>
          <remove_value name="$enemies_t.{$enemies_g.{$i}}"/>
          <remove_from_group object="$enemies_g.{$i}" group="$enemies_g"/>
        </do_if>
        <do_elseif value="not $stay_red? and this.container.distanceto.{$enemies_g.{$i}} lt $combatrange">
          <set_value name="$stay_red"/>
        </do_elseif>
      </do_all>
      
      <!-- Scan for (new) Enemies - Active Scan only performed if no Enemies are in Turret Range anymore  -->
      <do_if value="not $stay_red?">
        <find_gravidar_contact name="$enemies_add" object="this.container" functional="true" maybeattackedby="this.container" multiple="true">
          <match_distance object="this.container" max="$combatrange"/>
        </find_gravidar_contact>
      </do_if>
      
      <do_if value="not @$enemies_add.count and not $stay_red? and not $primarytarget.exists">
        <remove_value name="$enemies_add"/>
        <resume label="yellow"/>
      </do_if>
      <do_elseif value="@$enemies_add.count">
        <add_to_group groupname="$enemies_g" list="$enemies_add"/>
      </do_elseif>
      <remove_value name="$enemies_add"/>
      <remove_value name="$stay_red"/>
      
      <!-- if not already in Battlestate now enter it -->
      <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 OOS Battlestate Red, Target Group:\n%3'.[this.name,this.container.name,$enemies_g]"/>
      <do_if value="$battlestate != 'red'">
        <set_value name="$combatrange" exact="this.container.maxcombatrange.all"/>
        <!--activate_battlestate object="this.container" state="close_hangar"/-->
        <activate_battlestate object="this.container" state="battlestate_red"/>
        <do_if value="$battlestate == 'green'" comment="create formation for the Drones if previous battlestate was green (without formation)">
          <create_formation object="this.container" formation="formationshape.pointguard" param="this.container.size * 0.8"/>
        </do_if>
        <set_value name="$battlestate" exact="'red'"/>
        <do_if value="$namingentity.$namereplacement?">
          <set_value name="$namingentity.$namereplacement.$utcac_do_state" exact="'\033RR'"/>
          <signal_objects object="this.container" param="'Object Name Updated'"/>
        </do_if>
      </do_if>
      
      <set_value name="$nextenemyscan" min="player.age + 20s" max="player.age + 30s"/>
      
      <!-- get primary Target here -->
      <do_if value="$ordered_target.isoperational">
        <set_value name="$primarytarget" exact="$ordered_target"/>
      </do_if>
      <do_elseif value="@global.$utcac.$enemy_priority.isoperational and $enemies_g.indexof.{global.$utcac.$enemy_priority}">
        <set_value name="$primarytarget" exact="global.$utcac.$enemy_priority"/>
      </do_elseif>
      
      <run_script name="'ut.cac.com.defense.launchdrones'" chance="0" comment="just to keep blocking actions consistent with attention levels"/>
      <do_while value="player.age lt $nextenemyscan">
        <!-- get general performance by calculating the time of a minmum possible wait (basically the seconds per frame) -->
        <set_value name="$playerage_before" exact="player.age"/>
        <wait exact="1ms">
          <on_attentionchange>
            <do_if value="this.container.attention ge attention.visible">
              <remove_value name="$enemies_range"/>
            </do_if>
          </on_attentionchange>
        </wait>
        <set_value name="$spf" exact="(player.age)f - ($playerage_before)f"/>
        <set_value name="$waittime" exact="($spf * $spf) + ($spf / 10) * 600" comment="( seconds per frame ² + seconds per frame /10 ) * 600 ## Results in roughly 1.2s @60fps, 2.7s@30fps and 4,5s@20fps"/>
        <do_if value="$waittime gt 16s" comment="final round time above 10s - cap it there (see also next do_else)">
          <set_value name="$waittime" exact="10s"/>
        </do_if>
        <do_elseif value="$waittime gt 4s" comment="reduce round time if it gets too high (everything above 4s is halved)">
          <set_value name="$waittime" exact="$waittime/2 + 2s"/>
        </do_elseif>
        <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Round Time: %3 playerage before: %4, player.age: %5'.[this.name,this.container.name,$waittime,$playerage_before,player.age]"/>
        <!-- create/re-check Group of enemies in Range -->
        <do_if value="$enemies_range?">
          <do_all exact="$enemies_range.count" counter="$i" reverse="true">
            <do_if value="this.container.distanceto.{$enemies_range.{$i}} gt $combatrange">
              <remove_from_group object="$enemies_range.{$i}" group="$enemies_range"/>
            </do_if>
          </do_all>
        </do_if>
        <do_else>
          <create_group groupname="$enemies_range"/>
        </do_else>
        <do_if value="$enemies_range.count lt 10" comment="if we have fewer than 10 targets add new ones">
          <do_all exact="$enemies_g.count" counter="$i">
            <do_if value="this.container.distanceto.{$enemies_g.{$i}} lt $combatrange">
              <add_to_group object="$enemies_g.{$i}" groupname="$enemies_range"/>
            </do_if>
          </do_all>
        </do_if>
        <do_if value="$enemies_range.count == 0">
          <remove_value name="$enemies_range"/>
          <resume label="yellow"/>
        </do_if>
        <!-- try to attack Primary Target in every "round"-->
        <do_if value="$primarytarget.isoperational and this.container.distanceto.{$primarytarget} lt $combatrange">
          <do_all chance="[this.combinedskill, 90].max" comment="chance of succeed">
            <get_attackstrength result="$attackstrength" object="this.container" target="$primarytarget" usedrones="true" />
            <apply_attackstrength object="$primarytarget" attacker="this.container" strength="$attackstrength * $waittime" result="$ni" comment="not interested in result since Targets are removed from the Group"/>
            <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Applied Attackstrength: %3 hp to %4 (primary; base value: %5 time: %6 multi: %7 )'.[this.name,this.container.name,$attackstrength * $waittime,$primarytarget.name,$attackstrength,$waittime,$DamageMulti]"/>
          </do_all>
        <!-- Calculate Damage for Additional Targets - maximum overall Damage is same as Vanilla ( attackstrength * 3 ) but its distributed over more possible Targets (10 instead of 3) -->
          <set_value name="$HitVolleys" exact="[this.container.summary.numturrets.operational / 5 , $enemies_range.count , 10].min"/>
          <set_value name="$DamageMulti" exact="[2.0/$HitVolleys,1.0].min"/>
        </do_if>
        <do_else>
          <set_value name="$HitVolleys" exact="[this.container.summary.numturrets.operational / 5 , $enemies_range.count , 10].min"/>
          <set_value name="$DamageMulti" exact="[3.0/$HitVolleys,1.0].min"/>
        </do_else>
        <do_while value="$HitVolleys">
          <set_value name="$target" exact="$enemies_range.random" />
          <!-- Get and apply strengths-->
          <!-- the possibility of hitting the same Target multiple times is intended -->
          <do_all chance="[this.combinedskill, 90].max" comment="chance of succeed">
            <get_attackstrength result="$attackstrength" object="this.container" target="$target" usedrones="$target.isclass.[class.ship_xs, class.ship_s, class.ship_m]" />
            <apply_attackstrength object="$target" attacker="this.container" strength="$attackstrength * $waittime * $DamageMulti" result="$ni" comment="not interested in result since dead Targets are removed from the Group"/>
            <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Applied Attackstrength: %3 hp to %4 (base value: %5 time: %6 multi: %7 ) - result: %8'.[this.name,this.container.name,$attackstrength * $waittime * $DamageMulti,$target.name,$attackstrength,$waittime,$DamageMulti,$ni]"/>
          </do_all>
          <set_value name="$HitVolleys" operation="subtract"/>
         </do_while>
         <remove_value name="$ni" comment="as in 'not interested' for required return vars"/>
        <wait exact="($waittime)s" resume="true">
          <on_attentionchange>
            <do_if value="this.container.attention ge attention.visible">
              <remove_value name="$enemies_range"/>
            </do_if>
          </on_attentionchange>
        </wait>
      </do_while>
      
      
      <resume label="red"/>
      <!-- ######################################################################################################################################################### -->
      <label name="check state"/>
      <do_if value="$battlestate == 'green'">
        <resume label="green"/>
      </do_if>
      <do_if value="$battlestate == 'yellow'">
        <resume label="yellow"/>
      </do_if>
      <do_elseif value="$battlestate == 'red'">
        <resume label="red"/>
      </do_elseif>
      <do_else>
        <debug_text filter="error" text="'%1 %2 OOS no valid Battlestate saved: %3 - resetting'.[this.name,this.container.name,@$battlestate]"/>
        <resume label="init"/>
      </do_else>
    </actions>

  </attention>
  <on_abort>
    <!-- Script Terminated - set Drones into self-destruct mode and pass them as group via signal, so a replacement DO can recover them -->
    
    <!-- remove exposed values -->
    <remove_value name="this.$ut_cac.$defensemode"/>
    
    <!-- remove now unneeded Naming Vars from the Naming Entity -->
    <set_value name="$namingentity.$namereplacement.$utcac_do_state"/>
    <set_value name="$namingentity.$namereplacement.$utcac_do_droneratio"/>
    <signal_objects object="this.container" param="'Object Name Updated'"/>
  </on_abort>
</aiscript>
