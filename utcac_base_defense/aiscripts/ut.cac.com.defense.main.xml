<?xml version="1.0" encoding="UTF-8"?>
<aiscript name="ut.cac.com.defense.main" version="30" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://utnas/~unitrader/XRebirthxsds/aiscripts.xsd">
  <!--
Main Script for the Defense Officer - he wont use an Orderlist because he has to react to many diffrent situations, not completing one task after another like Architect, Captain, Engineer and Manager can do.
Core Point of this Script is efficient usage of available Weapons, Drones and also coordinating Allies nearby.

Main Modes, in order from lowest to highest priority:
#1 Battlestate Green - no Enemies in Radar Range:
=> Weapons inactive
=> Drones are usually Docked, but may be sent out to scout the nearby Area (mostly for atmosphere)
=> Listening to Enemy-in-sight-Events (no active search, i think Signals are better for performance)
=> PLANNED: Listen to global Reinforcement Request Signals, and if incoming signal Captain to intervene
=> PLANNED: if heavily damaged possibly execute Repair Script for single component during this Period to help the Engineer speeding up Repairs (will not be as good as the Engineer himself though)

#2 Battlestate Jumpprep Green (by Travel Jump/Boost event)
=> Weapons inactive
=> Drones are all Docked (call back flying ones and block travel to wait for them)

#3 Battlestate Yellow - Enemies in Radar Range, but not near Combat Range (triggered by Radar scan)
=> Weapons Active
=> Drones are launched into formation around Ship to stay standby (possibly start some to take out smaller attacking groups or at least distract them)
=> Incoming Missiles are picked on by standby drones in rotation
=> regular Active Search for Enemies to have Target List at hand when needed (sorted in Primary Target, Prio Targets and other Targets)
=> PLANNED: if missile Defense is over-saturated possibly signal nearby Allies for support/cover against incoming missiles
=> PLANNED: Possibly start a prophylactic slow charge if low on Jump Fuel? (needs coordination with Captain)
=> PLANNED: Coordinate/prepare Long-Range Attack with Captain

#4 Battlestate Red - In Combat, either triggered by Weapons Range or by Attacked Event
=> Paint intentional Attackers Red for your Faction (possibly use the default tolerance system if possible)
=> Weapons Active
=> Most Drones engage enemies in a coordinated manner (when enemy is shot check for nearby other one, if none is found return to standby)
=> Remaining Drones stand by for missile Defense
=> Active and more aggresive Search for Enemies (sorted in Primary Target, Prio Targets and other Targets)
=> Listen for Ceasefire Events from Attackers to (temporarily) exclude them from the Target List (will not be used initially)
=> PLANNED: if missile Defense is over-saturated possibly signal nearby Allies for support/cover against incoming missiles

#5 Battlestate Jumpprep Red - when Ship will Travel soon/now (either regular Travel or Emergency Jump/Boost)
=> Weapons Active
=> Drones are recalled immediately (they will decide themselves if they can make it or should stay; Mother Ship wont wait for them; see also next point)
=> when travel event occurs Drones not yet docked will resume independently and be unlinked from the mother ship (shoot enemies until destroyed, possibly go kamikaze, when no enemies remain self-destruct)
=> PLANNED: possibly signal nearby Allies for support/cover against incoming missiles


Notes to certain Features:
=> Ceasefire events:
> Checks line-of-sight immediately and possibly ceases fire completely for a moment to update target list
> Will make Targets blue (temporarily if enemy, restore temp rep boost if friendly)
> has to be verified by the DO
> DO will also send it and cease fire himself when detecting received FF 
> Reasons for event and likelyhood of sucess:
Ships being Boarded by an Ally (works always, no rep change, stays for the duration of the boarding op) -will not be used initially
Friendly Fire (before red) (always works if target is still blue; increases tolerance before turning red for a couple of seconds; might cost a bit rep, but not turn it to enemy)
Friendly Fire (after red) (faction rep dependent; will decrease perma rep minimally, but not below neutral where it will stop to work at all; will only work once per hour, but is permanent)
Hack/Fake (Planned; Small/Skill based chance for sucess; will revert immediately after a short cooldown or on continued Attack)

=> Drones
> Drones will be sent against (strong) incoming missiles one after another
> if Dangerous Missiles get in Point Defense Weapons Range of the mother Ship Drones will also try to Kamikaze into them
> when incoming missiles have roughly the same speed as the drone or faster each drone only makes one attempt to shoot them, if it fails a fresh drone is sent
> They will also be sent in Groups against single small Targets, prefferably in a way that keeps them together
> Drones will attempt to stay inside the Capships main Weapons Range and return there if they stray too far

-->


  <params>
    <param name="params" default="false" comment="pass a single Table filled with the wanted param Values here to make calls via list possible (always has priority)"/>
  </params>
  <init>
    <!-- first turn $params param into the real params - ######TO DO######### -->
    <do_if value="$params.$trade?">
      <set_value name="$trade" exact="$params.$trade"/>
    </do_if>
    
    <!-- Create all internally used Groups -->
    <create_group groupname="$enemies"/>
    <create_group groupname="$availabledrones"/>
    <create_group groupname="$prioritytargets"/>
    
  </init>
  <interrupts>
    <handler comment="Attacked - go into battlestate red">
      <conditions>
        <check_any>
          <event_object_attacked object="this.ship"/>
          <!-- Event for the specified object being attacked (object = attacked object, param = attacker, param2 = kill method, param3 = attacked component) -->
        </check_any>
        <check_value value="$battlestate != 'red'" comment="Verify we are not already in Combat" />
      </conditions>
      <actions>
        <add_to_group groupname="$enemies" object="event.param"/>
        <!-- ##### Check if Attack was intentional and make attacker Enemy -->
        <resume label="red"/>
      </actions>
    </handler>
    <handler comment="Missile launched against us (or missed by interception Drones) - send (other) interceptors">
      <conditions>
        <check_any>
          <event_object_incoming_missile object="this.ship"/>
          <!-- Event for when a missile is launched at the specified object (object = target object, param = target component, param2 = missile, param3 = missile source) -->
          <event_object_signalled object="this.ship" param="'missile drone defense failed'"/>
        </check_any>
      </conditions>
      <actions>
        <!-- rate danger of Missile and add to prio Targets and/or send interceptor Drones -->
        <!-- for now just send one Interceptor Drone per missile if avialable -->
        <set_value name="$index" exact="1"/>
        <do_all exact="$availabledrones.count" counter="$i">
          <do_if value="$availabledrones.{$i}.distanceto.{event.param2} lt $availabledrones.{$index}.distanceto.{event.param2}">
            <set_value name="$index" exact="$i"/>
          </do_if>
        </do_all>
        <signal_objects object="$availabledrones.$index" param="'execute order'" param2="table[$script='ut.cac.com.drone.singleattackrun',$target=event.param2,$kamikaze=true]"/>
      </actions>
    </handler>
    <handler comment="Clean up Enemy Groups when they cease to be a Threat">
      <conditions>
        <check_any>
          <event_object_changed_zone group="$enemies"/>
        </check_any>
      </conditions>
    </handler>
    <handler comment="travel intent signals - stop maintaining target lists and instead wait for the right moment to recall defensive drones">
      <conditions>
        <check_any>
          <event_object_signalled object="this.ship" param="'travel boost prep'"/>
          <event_object_signalled object="this.ship" param="'travel jump prep'"/>
          <!--event_object_signalled object="this.ship" param="'travel jump start'"/-->
          <event_object_signalled object="this.ship" param="'travel gate prep'"/>
        </check_any>
      </conditions>
      <actions>
        <resume label="travel"/>
      </actions>
    </handler>
  </interrupts>
  <attention min="visible">
    <actions>
    <do_if value="false" chance="0" comment="for collecting useful Snippets">
    <!--- ################# -->
    <!-- Drone Launch taken from Architect Drone Transfer -->
            <debug_text filter="general" chance="@this.$debug * 100" text="'launching Drones for Transfer'"/>
        <find_object_component groupname="$dronelaunchbays" object="this.container" multiple="true" class="class.dronelaunchpad" checkoperational="true"/>
        <do_if value="this.ship.units.{unitcategory.transport}.count gt 20 and this.ship.availableunits.{unitcategory.transport}.count ge 1">
          <set_value name="$transferamount" exact="[ (this.ship.units.{unitcategory.transport}.count - 20) , this.ship.availableunits.{unitcategory.transport}.count ].min"/>
          <do_all exact="$transferamount">
            <launch_drone name="$drone" object="$dronelaunchbays.random" group="unitcategory.transport" exact="1"/>
            <wait min="2.5s" max="3.5s"/>
            <do_if value="$drone.isoperational">
              <remove_units object="this.ship" macro="$drone.macro" exact="1" unavailable="true"/>
              <add_units object="$station" macro="$drone.macro" exact="1" unavailable="true"/>
              <set_object_commander object="$drone" commander="$station"/>
              <start_script object="$drone.pilot" name="'move.dockat.drone'">
                <param name="destination" value="$station"/>
              </start_script>
            </do_if>
          </do_all>
          <debug_text filter="general" chance="@this.$debug * 100" text="'Launched %1 Drones from %2 launch bays'.[$transferamount,$dronelaunchbays.count]"/>
        </do_if>
        <do_if value="this.ship.availableunits.{unitcategory.gascollector}.count ge 1">
          <set_value name="$transferamount" exact="this.ship.availableunits.{unitcategory.gascollector}.count"/>
          <do_all exact="$transferamount">
            <launch_drone name="$drone" object="$dronelaunchbays.random" group="unitcategory.gascollector" exact="1"/>
            <wait min="2.5s" max="3.5s"/>
            <do_if value="$drone.isoperational">
              <remove_units object="this.ship" macro="$drone.macro" exact="1" unavailable="true"/>
              <add_units object="$station" macro="$drone.macro" exact="1" unavailable="true"/>
              <set_object_commander object="$drone" commander="$station"/>
              <start_script object="$drone.pilot" name="'move.dockat.drone'">
                <param name="destination" value="$station"/>
              </start_script>
            </do_if>
          </do_all>
          <debug_text filter="general" chance="@this.$debug * 100" text="'Launched %1 Drones from %2 launch bays'.[$transferamount,$dronelaunchbays.count]"/>
        </do_if>
    <!--- ################# -->
    </do_if>
      <label name="init"/>
      
      <set_value name="$battlestate" exact="'green'"/>
      
      
      <!-- ######################################################################################################################################################### -->
      <label name="green"/>
      <do_if value="$battlestate != 'green'">
        <set_value name="$battlestate" exact="'green'"/>
        <cease_fire object="this.ship"/>
        <stop_shooting object="this.ship" slot="tag.primary_slot"/>
        <stop_shooting object="this.ship" slot="tag.secondary_slot"/>
        <activate_battlestate object="this.ship" state="battlestate_jumpprep"/>
        <activate_battlestate object="this.ship" state="open_hangar"/>
        <signal_objects object="this.ship" param="'recall drones'"/>
      </do_if>
      
      <wait>
        <interrupt>
          <conditions>
            <event_object_enemy_found object="this.ship"/>
            <check_value value="this.ship.distanceto.{event.param} lt this.ship.maxradarrange"/>
          </conditions>
          <actions>
            <resume label="yellow"/>
          </actions>
        </interrupt>
      </wait>
      
      <resume label="green"/>
      <!-- ######################################################################################################################################################### -->
      <label name="yellow"/>
      <do_if value="$battlestate != 'yellow'">
        <activate_battlestate object="this.ship" state="battlestate_yellow"/>
        <activate_battlestate object="this.ship" state="open_hangar"/>
        <do_if value="$battlestate == 'green'" comment="create formation for the Drones if previous battlestate was green (without formation)">
          <create_formation object="this.ship" formation="formationshape.pointguard" param="this.ship.size"/>
        </do_if>
        <set_value name="$battlestate" exact="'yellow'"/>
      </do_if>
      <!-- Scan for Enemies -->
      <find_gravidar_contact groupname="$enemies" object="this.ship" functional="true" maybeattackedby="this.ship" multiple="true">
        <match_distance object="this.ship" max="this.ship.maxradarrange"/>
      </find_gravidar_contact>
      
      <do_if value="not $enemies.count">
        <resume label="green"/>
      </do_if>
      
      <!-- Filter Enemies -->
      
      <do_if value="not $primarytarget.isoperational">
        <set_value name="$primarytarget" exact="$enemies.random"/><!-- ToDo: get proper primary Target (this is just a temp measure to prevent an Error) -->
      </do_if>
      <set_turret_targets object="this.ship" preferredtarget="$primarytarget" target="$enemies.list"/>
      
      
      <set_value name="$nextenemyscan" min="player.age + 20s" max="player.age + 30s"/>
      
      <resume label="launchdrones"/>
      <!-- ######################################################################################################################################################### -->
      <label name="red"/>
      <do_if value="$battlestate != 'red'">
        <activate_battlestate object="this.ship" state="battlestate_yellow"/>
        <activate_battlestate object="this.ship" state="close_hangar"/>
        <do_if value="$battlestate == 'green'" comment="create formation for the Drones if previous battlestate was green (without formation)">
          <create_formation object="this.ship" formation="formationshape.pointguard" param="this.ship.size"/>
        </do_if>
        <set_value name="$battlestate" exact="'red'"/>
      </do_if>
      
      
      <!-- Scan for Enemies -->
      <find_gravidar_contact groupname="$enemies" object="this.ship" functional="true" maybeattackedby="this.ship" multiple="true">
        <match_distance object="this.ship" max="this.ship.maxradarrange"/>
      </find_gravidar_contact>
      
      <do_if value="not $enemies.count">
        <resume label="green"/>
      </do_if>
      
      <!-- Filter Enemies -->
      
      <do_if value="not $primarytarget.isoperational">
        <set_value name="$primarytarget" exact="$enemies.random"/><!-- ToDo: get proper primary Target (this is just a temp measure to prevent an Error) -->
      </do_if>
      <set_turret_targets object="this.ship" preferredtarget="$primarytarget" target="$enemies.list"/>
      
      <set_turret_targets object="this.ship" preferredtarget="$primarytarget" target="$enemies"/>
      
      
      <set_value name="$nextenemyscan" min="player.age + 20s" max="player.age + 30s"/>
      
      
      <resume label="launchdrones"/>
      <!-- ######################################################################################################################################################### -->
      <label name="travel"/>
      <wait resume="true">
        <interrupt>
          <conditions>
            <check_any>
              <event_object_signalled object="this.ship" param="'travel jump start'" comment="JD charging - time to recall remaining Drones which had an Order when we announced our intent to jump"/>
              <event_object_approaching_waypoint object="this.ship" lastwaypoint="true" comment="boosting very soon - time to recall remaining Drones which had an Order when we announced our intent to boost"/>
            </check_any>
          </conditions>
          <actions>
            <signal_objects object="this.ship" param="'recall drones'"/>
          </actions>
        </interrupt>
        <interrupt>
          <conditions>
            <event_object_signalled object="this.ship" param="'travel aborted'" comment="Travel intent aborted - resuming as usual"/>
          </conditions>
          <actions>
            <resume label="check state"/>
          </actions>
        </interrupt>
      </wait>
      <wait resume="true">
        <interrupt>
          <conditions>
            <check_any>
              <event_object_changed_zone object="this.ship"/>
              <event_object_arrived_at_waypoint object="this.ship" lastwaypoint="true"/>
              <event_object_approaching_waypoint object="this.ship" lastwaypoint="true"/>
            </check_any>
          </conditions>
        </interrupt>
      </wait>
      <resume label="check state"/>
      <!-- ######################################################################################################################################################### -->
      <label name="launchdrones"/><!-- comment="shared by battlestate yellow and red -->
      <!-- Start Drones until next Enemy Scan -->
      <debug_text filter="general" chance="@this.$debug * 100" text="'launching Drones'"/>
      <find_object_component name="$dronelaunchbays" object="this.container" multiple="true" class="class.dronelaunchpad" checkoperational="true" chance="if $dronelauchbays? then 10 else 100"/>
      <do_while value="player.age le $nextenemyscan and $dronelaunchbays.count and this.ship.units.{unitcategory.defence}.count and not this.ship.isboostactive">
        <do_all exact="[$dronelaunchbays.count, this.ship.units.{unitcategory.defence}.count].min" counter="$i" reverse="true">
          <do_if value="$dronelaunchbays.{$i}.isoperational">
            <launch_drone name="$drone" object="$dronelaunchbays.{$i}" group="unitcategory.defence" exact="1"/>
            <set_object_commander object="$drone" commander="this.ship"/>
            <do_if value="$drone.isoperational">
              <start_script object="$drone.pilot" name="'ut.cac.com.drone.main'">
                <param name="freedrones" value="$availabledrones"/>
             </start_script>
            </do_if>
          </do_if>
          <do_else>
            <remove_value name="$dronelaunchbays.{$i}"/>
          </do_else>
        </do_all>
        <wait min="1.5s" max="2.5s" resume="true"/>
      </do_while>
      <!-- if its not time for enemy scan yet just wait -->
      <do_if value="player.age le $nextenemyscan">
        <remove_value name="$dronelaunchbays"/>
        <wait exact="$nextenemyscan - player.age"/>
      </do_if>
      
      <label name="check state"/>
      <do_if value="$battlestate == 'green'">
        <resume label="green"/>
      </do_if>
      <do_if value="$battlestate == 'yellow'">
        <resume label="yellow"/>
      </do_if>
      <do_elseif value="$battlestate == 'red'">
        <resume label="red"/>
      </do_elseif>
      <do_else>
         <debug_text filter="error" text="'%1 %2 %3 no valid Battlestate saved: %4 - resetting'.[player.age,this.name,this.container.name,@$battlestate]"/>
        <resume label="init"/>
      </do_else>
    </actions>
  </attention>
  <attention min="unknown">
    <actions>
      
    </actions>
  </attention>
  <on_abort>
    <!-- Script Terminated - set Drones into self-destruct mode and pass them as group via signal, so a replacement DO can recover them -->
  </on_abort>
</aiscript>
