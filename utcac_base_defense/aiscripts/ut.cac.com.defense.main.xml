<?xml version="1.0" encoding="UTF-8"?>
<aiscript name="ut.cac.com.defense.main" version="30" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://utnas/~unitrader/XRebirthxsds/aiscripts.xsd">
  <!--
Main Script for the Defense Officer - he wont use an Orderlist because he has to react to many diffrent situations, not completing one task after another like Architect, Captain, Engineer and Manager can do.
Core Point of this Script is efficient usage of available Weapons, Drones and also coordinating Allies nearby.

Main Modes, in order from lowest to highest priority:
#1 Battlestate Green - no Enemies in Radar Range:
=> Weapons inactive
=> Drones are usually Docked, but may be sent out to scout the nearby Area (mostly for atmosphere)
=> Listening to Enemy-in-sight-Events (no active search, i think Signals are better for performance)
=> PLANNED: Listen to global Reinforcement Request Signals, and if incoming signal Captain to intervene
=> PLANNED: if heavily damaged possibly execute Repair Script for single component during this Period to help the Engineer speeding up Repairs (will not be as good as the Engineer himself though)

#2 Battlestate Yellow - Enemies in Radar Range, but not near Combat Range (triggered by Radar scan)
=> Weapons Active
=> Drones are launched into formation around Ship to stay standby (possibly start some to take out smaller attacking groups or at least distract them)
=> Incoming Missiles are picked on by standby drones in rotation
=> Passive Search for Enemies to have Target List at hand when needed (sorted in Primary Target, Prio Targets and other Targets)
=> PLANNED: if missile Defense is over-saturated possibly signal nearby Allies for support/cover against incoming missiles -> unneeded
=> PLANNED: Possibly start a prophylactic slow charge if low on Jump Fuel? (needs coordination with Captain)
=> PLANNED: Coordinate/prepare Long-Range Attack with Captain

#3 Battlestate Red - In Combat, either triggered by Weapons Range or by Attacked Event
=> Paint intentional Attackers Red for your Faction (possibly use the default tolerance system if possible)
=> Weapons Active
=> Most Drones engage enemies in a coordinated manner (when enemy is shot check for nearby other one, if none is found return to standby)
=> Remaining Drones stand by for missile Defense
=> Active and more aggresive Search for Enemies (sorted in Primary Target, Prio Targets and other Targets) => Passive Search until few Targets in Range remain lessen CPU Load
=> Listen for Ceasefire Events from Attackers to (temporarily) exclude them from the Target List (will not be used initially)
=> PLANNED: if missile Defense is over-saturated possibly signal nearby Allies for support/cover against incoming missiles

=> Additionally Travel Signals will also be listened to to prevent Drone Launch shortly before Travel and to recall Drones in time

Notes to certain Features:
=> Ceasefire events:
> Checks line-of-sight immediately and possibly ceases fire completely for a moment to update target list
> Will make Targets blue (temporarily if enemy, restore temp rep boost if friendly)
> has to be verified by the DO
> DO will also send it and cease fire himself when detecting received FF 
> Reasons for event and likelyhood of sucess:
Ships being Boarded by an Ally (works always, no rep change, stays for the duration of the boarding op) -will not be used initially
Friendly Fire (before red) (always works if target is still blue; increases tolerance before turning red for a couple of seconds; might cost a bit rep, but not turn it to enemy)
Friendly Fire (after red) (faction rep dependent; will decrease perma rep minimally, but not below neutral where it will stop to work at all; will only work once per hour, but is permanent)
Hack/Fake (Planned; Small/Skill based chance for sucess; will revert immediately after a short cooldown or on continued Attack)

=> Drones
> Drones will be sent against (strong) incoming missiles one after another
> if Dangerous Missiles get in Point Defense Weapons Range of the mother Ship Drones will also try to Kamikaze into them
> when incoming missiles have roughly the same speed as the drone or faster each drone only makes one attempt to shoot them, if it fails a fresh drone is sent
> They will also be sent in Groups against single small Targets, prefferably in a way that keeps them together
> Drones will attempt to stay inside the Capships main Weapons Range and return there if they stray too far

-->

  <params>
    <param name="params" default="false" comment="pass a single Table filled with the wanted param Values here to make calls via list possible (always has priority)"/>
  </params>
  <init>
    <!-- Create all internally used Groups -->
    <create_group groupname="$enemies_g"/>
    <set_value name="$enemies_t" exact="table[]"/>
    <create_group groupname="$drones_missiledefense" comment="most maneuverable Drones"/>
    <create_group groupname="$drones_attack" comment="Drones with Heavy armanements, not suited for dogfights"/>
    <create_group groupname="$drones_defense" comment="all remaining drones"/>
    <set_value name="$primarytarget" exact="null"/>
    <set_value name="$droneratio" exact="1.0" comment="ratio of drones which should be launched - depends on Travel preperations (all if no fast travel is planned, 25% in boost prep, 10% in jump prep, 0% when starting jump/boost)"/>
    
    <!-- create GV to store empty Groups -->
    <do_if value="not global.$unused_groups?">
      <set_value name="global.$unused_groups" exact="[]"/>
    </do_if>
  </init>
  <interrupts>
    <handler comment="Attacked or enemy found - go into battlestate red/yellow">
      <conditions>
        <check_any>
          <check_all>
            <event_object_attacked object="this.ship"/>
            <!-- Event for the specified object being attacked (object = attacked object, param = attacker, param2 = kill method, param3 = attacked component) -->
            <check_value value="this.ship.mayattack.{event.param}"/>
          </check_all>
          <check_all>
            <event_object_enemy_found object="this.ship"/>
            <check_value value="this.ship.distanceto.{event.param} lt this.ship.maxradarrange and not event.param.ismasstraffic"/>
          </check_all>
          <event_object_incoming_missile object="this.ship"/>
          <!-- Event for when a missile is launched at the specified object (object = target object, param = target component, param2 = missile, param3 = missile source) -->
        </check_any>
      </conditions>
      <actions>
        <set_value name="$attacker" exact="if event.name == 'event_object_incoming_missile' then event.param3 else event.param"/>
        <add_to_group groupname="$enemies_g" object="$attacker"/>
        <!-- This Snippet is just because i see a possible memory leak here - <create_group/> alone should be enough -->
        <do_if value="not $enemies_t.{$attacker}?">
          <do_if value="global.$unused_groups.{1}?">
            <set_value name="$newgroup" exact="global.$unused_groups.{1}"/>
            <remove_value name="global.$unused_groups.{1}"/>
          </do_if>
          <do_else>
            <create_group groupname="$newgroup"/>
          </do_else>
          <set_value name="$enemies_t.{$attacker}" exact="$newgroup"/>
        </do_if>
        <!-- ##### Check if Attack was intentional and make attacker Enemy -->
        <do_if value="event.name == 'event_object_attacked'">
          <!-- send some drones after the Attacker and go into red alert -->
          <do_if value="$enemies_t.{$attacker}.count le 3 and $drones_defense.count">
            <do_if value="$attacker.isclass.{[class.drone,class.ship_xs,class.ship_s,class.ship_m]}">
              <set_value name="$hp" exact="$attacker.maxhull + $attacker.maxshield"/>
              <!-- subtract DPS of already attacking Drones -->
              <do_all exact="$enemies_t.{$attacker}.count" counter="$i">
                <set_value name="$hp" operation="subtract" exact="$enemies_t.{$attacker}.{$i}.dps.all"/>
              </do_all>
              <do_while value="$drones_defense.count and $hp gt 0 and $enemies_t.{$attacker}.count le 3">
                <set_value name="$newinterceptor" exact="$drones_defense.random"/>
                <set_value name="$hp" operation="subtract" exact="$newinterceptor.dps.all"/>
                <debug_text filter="general" text="'%1 %2 %3 Launching Interceptor %4 to kill %5'.[player.age,this.name,this.container.name,$newinterceptor,$attacker.name]"/>
                <signal_objects object="$newinterceptor" param="'execute order'" param2="table[$script='ut.cac.com.drone.fight',$target=$attacker,$othertargets=true]"/>
                <remove_from_group object="$newinterceptor" group="$drones_defense"/>
                <add_to_group object="$newinterceptor" groupname="$enemies_t.{$attacker}"/>
              </do_while>
            </do_if>
          </do_if>
          <abort_called_scripts resume="red"/>
        </do_if>
        <do_else>
          <abort_called_scripts resume="yellow"/>
        </do_else>
      </actions>
    </handler>
    <handler comment="Missile launched against us (or missed by interception Drones) - send (other) interceptors, add missile to turret targets">
      <conditions>
        <check_any>
          <event_object_incoming_missile object="this.ship"/>
          <!-- Event for when a missile is launched at the specified object (object = target object, param = target component, param2 = missile, param3 = missile source) -->
          <event_object_signalled object="this.ship" param="'missile drone defense failed'"/>
        </check_any>
      </conditions>
      <actions>
        <!-- rate danger of Missile and add to prio Targets and/or send interceptor Drones -->
        <!-- for now just send one Interceptor Drone per missile if avialable -->
        <do_if value="$drones_missiledefense.count">
          <set_value name="$index" exact="1"/>
          <do_all exact="$drones_missiledefense.count" counter="$i">
            <do_if value="$drones_missiledefense.{$i}.distanceto.{event.param2} lt $drones_missiledefense.{$index}.distanceto.{event.param2}">
              <set_value name="$index" exact="$i"/>
            </do_if>
          </do_all>
          <set_value name="$randominterceptors" exact="if this.ship.distanceto.{event.param2} gt this.ship.size * 1.5 then 0 else [ 10 , $drones_missiledefense.count / 3 ].min"/>
          <debug_text filter="general" text="'%1 %2 %3 Launching Missile Defense Drone %4 plus %8 random ones to intercept %6 (start distance %7 ) - from set \n%5'.[player.age,this.name,this.container.name,$drones_missiledefense.{$index},$drones_missiledefense,event.param2,this.ship.distanceto.{event.param2},$randominterceptors]"/>
          <signal_objects object="$drones_missiledefense.{$index}" param="'execute order'" param2="table[$script='ut.cac.com.drone.singleattackrun',$target=event.param2,$kamikaze=true,$debug_out_all=true]"/>
          <remove_from_group object="$drones_missiledefense.{$index}" group="$drones_missiledefense"/>
          <do_all exact="$randominterceptors">
            <set_value name="$newinterceptor" exact="$drones_missiledefense.random"/>
            <signal_objects object="$newinterceptor" param="'execute order'" param2="table[$script='ut.cac.com.drone.singleattackrun',$target=event.param2,$kamikaze=true]"/>
            <remove_from_group object="$newinterceptor" group="$drones_missiledefense"/>
          </do_all>
        </do_if>
        <add_to_group groupname="$enemies_g" object="event.param2"/>
        <set_turret_targets object="this.ship" preferredtarget="$primarytarget" target="$enemies_g.list"/>
      </actions>
    </handler>
    <handler comment="Active Scan performed after Sector Changes">
      <conditions>
        <event_object_changed_sector object="this.ship"/>
      </conditions>
      <actions>
        <!-- signal all Drones pursuing Enemies to return, store group for later usage (might not be needed) -->
        <do_all exact="$enemies_g.count" counter="$i">
          <signal_objects group="$enemies_t.{$enemies_g.{$i}}" param="'return dock'"/>
          <clear_group group="$enemies_t.{$enemies_g.{$i}}"/>
          <append_to_list name="global.$unused_groups" exact="$enemies_t.{$enemies_g.{$i}}"/>
          <remove_value name="$enemies_t.{$enemies_g.{$i}}"/>
        </do_all>
        <clear_group group="$enemies_g"/>
        <!-- find Enemies in Turret Range (for Battlestate Red) -->
        <find_gravidar_contact groupname="$enemies_g" object="this.ship" functional="true" maybeattackedby="this.ship" multiple="true">
          <match_distance object="this.ship" max="this.ship.maxcombatrange.turrets"/>
        </find_gravidar_contact>
        <do_if value="$enemies_g.count">
          <abort_called_scripts resume="red"/>
        </do_if>
        <!-- Find Enemies in Radar Range (for Battlestate Yellow) -->
        <find_gravidar_contact groupname="$enemies_g" object="this.ship" functional="true" maybeattackedby="this.ship" multiple="true">
          <match_distance object="this.ship" max="this.ship.maxradarrange"/>
        </find_gravidar_contact>
        <do_if value="$enemies_g.count">
          <abort_called_scripts resume="yellow"/>
        </do_if>
        <!-- no Enemies nearby -->
        <abort_called_scripts resume="green"/>
      </actions>
    </handler>
    <handler comment="Clean up Enemies Group when they cease to be a Threat">
      <conditions>
        <check_any>
          <event_object_changed_zone group="$enemies_g"/>
          <event_object_destroyed group="$enemies_g"/>
          <!-- more events which indicate the enemy is gone? -->
        </check_any>
        <check_value value="( not event.object.isoperational ) or this.ship.distanceto.{event.object} gt this.ship.maxradarrange"/>
      </conditions>
      <actions>
        <remove_from_group group="$enemies_g" object="event.object"/>
        <signal_objects group="$enemies_t.{event.object}" param="'return formation'"/>
        <!-- store group for later usage - might not be needed -->
        <append_to_list name="global.$unused_groups" exact="$enemies_t.{event.object}"/>
        <remove_value name="$enemies_t.{event.object}"/>
      </actions>
    </handler>
    <handler comment="travel intent signals - set Variables for not launching Drones anymore and send Drone Recall Singals">
      <conditions>
        <check_any>
          <event_object_signalled object="this.ship" param="'travel aborted'"/>
          <event_object_signalled object="this.ship" param="'travel completed'"/>
          <event_object_signalled object="this.ship" param="'travel boost prep'"/>
          <event_object_signalled object="this.ship" param="'travel jump prep'"/>
          <event_object_signalled object="this.ship" param="'travel gate prep'"/>
          <event_object_signalled object="this.ship" param="'travel jump start'"/>
          <event_object_signalled object="this.ship" param="'travel boost start'"/>
          <event_object_signalled object="this.ship" param="'travel gate start'"/>
        </check_any>
      </conditions>
      <actions>
        <do_if value="event.param == 'travel aborted' or event.param == 'travel completed'">
          <set_value name="$droneratio" exact="1.0"/>
        </do_if>
        <do_elseif value="event.param == 'travel boost prep'">
          <set_value name="$droneratio" exact="0.25"/>
        </do_elseif>
        <do_elseif value="event.param == 'travel jump prep'">
          <set_value name="$droneratio" exact="0.1"/>
        </do_elseif>
        <do_elseif value="event.param == 'travel gate prep'">
          <set_value name="$droneratio" exact="0.66"/>
        </do_elseif>
        <do_else>
          <!-- all remaining Travel Signals - stop launching drones -->
          <set_value name="$droneratio" exact="0.0"/>
          <signal_objects object="this.ship" param="'recall drones'"/>
        </do_else>
        <!-- recall Drones so target ratio is reached -->
        <do_if value="$droneratio == 1.0 or this.ship.units.{unitcategory.defence}.count == 0" comment="no need to check if all drones should be sent or we have no drones"/>
        <do_elseif value="1.0 - this.ship.availableunits.{unitcategory.defence}.count / this.ship.units.{unitcategory.defence}.count gt $droneratio">
          <signal_objects object="this.ship" param="'recall drones'" param2=" $droneratio / ( 1.0 - this.ship.availableunits.{unitcategory.defence}.count / this.ship.units.{unitcategory.defence}.count )"/><!-- signals the ratio of Drones which should be recalled -->
        </do_elseif>
        <abort_called_scripts/>
      </actions>
    </handler>
  </interrupts>
  <attention min="unknown">
    <actions>
      <label name="init"/>
      
      <set_value name="$battlestate" exact="'green'"/>
      
      
      <!-- ######################################################################################################################################################### -->
      <label name="green"/>
      <debug_text filter="general" text="'%1 %2 %3 Battlestate Green'.[player.age,this.name,this.container.name]"/>
      <do_if value="$battlestate != 'green'">
        <cease_fire object="this.ship"/>
        <stop_shooting object="this.ship" slot="tag.primary_slot"/>
        <stop_shooting object="this.ship" slot="tag.secondary_slot"/>
        <!--activate_battlestate object="this.ship" state="open_hangar"/-->
        <activate_battlestate object="this.ship" state="battlestate_jumpprep"/>
        <signal_objects object="this.ship" param="'recall drones'"/>
        <leave_formation object="this.ship"/>
        <set_value name="$battlestate" exact="'green'"/>
      </do_if>
      
      <wait resume="true"/>
      <!-- what could the DO do when there is nothing else to do? help the Engineer with repairs? -->
      <!-- order supplies? -->
      
      <resume label="green"/>
      <!-- ######################################################################################################################################################### -->
      <label name="yellow"/>
      <!-- check if previous enemies are still in sight and if someone entered our Combatrange (switch to red) -->
      <do_all exact="$enemies_g.count" counter="$i" reverse="true">
        <do_if value="not $enemies_g.{$i}.isoperational or not this.ship.mayattack.{$enemies_g.{$i}} or this.ship.distanceto.{$enemies_g.{$i}} gt this.ship.maxradarrange">
          <signal_objects group="$enemies_t.{$enemies_g.{$i}}" param="'return formation'"/>
          <clear_group group="$enemies_t.{$enemies_g.{$i}}"/>
          <append_to_list name="global.$unused_groups" exact="$enemies_t.{$enemies_g.{$i}}"/>
          <remove_value name="$enemies_t.{$enemies_g.{$i}}"/>
          <remove_from_group object="$enemies_g.{$i}" group="$enemies_g"/>
        </do_if>
        <do_elseif value="this.ship.distanceto.{$enemies_g.{$i}} lt this.ship.maxcombatrange.turrets">
          <resume label="red"/>
        </do_elseif>
      </do_all>
      <!-- Scan for (new) Enemies - during Yellow Alert done exlcusively via events - ->
      <find_gravidar_contact groupname="$enemies_g" object="this.ship" functional="true" maybeattackedby="this.ship" multiple="true">
        <match_distance object="this.ship" max="this.ship.maxradarrange"/>
      </find_gravidar_contact>
      -->
      
      <!-- Filter Enemies -->
      
      <do_if value="not $enemies_g.count">
        <resume label="green"/>
      </do_if>
      
      <!-- if not in Battlestate now enter it -->
      <debug_text filter="general" text="'%1 %2 %3 Battlestate Yellow, Target Group:\n%4'.[player.age,this.name,this.container.name,$enemies_g]"/>
      <do_if value="$battlestate != 'yellow'">
        <!--activate_battlestate object="this.ship" state="open_hangar"/-->
        <activate_battlestate object="this.ship" state="battlestate_yellow"/>
        <do_if value="$battlestate == 'green'" comment="create formation for the Drones if previous battlestate was green (without formation)">
          <create_formation object="this.ship" formation="formationshape.pointguard" param="this.ship.size * 0.8"/>
        </do_if>
        <set_value name="$battlestate" exact="'yellow'"/>
      </do_if>
      
      <do_if value="not $primarytarget.isoperational">
        <set_value name="$primarytarget" exact="$enemies_g.random"/><!-- ToDo: get proper primary Target (this is just a temp measure to prevent an Error) -->
      </do_if>
      <set_turret_targets object="this.ship" preferredtarget="$primarytarget" target="$enemies_g.list"/>
      
      <set_value name="$nextenemyscan" min="player.age + 50s" max="player.age + 70s"/>
      
      <do_if value="$droneratio gt 0.0">
        <run_script name="'ut.cac.com.defense.launchdrones'">
          <!-- param name="exittime" value="$nextenemyscan" comment="only performing passive scans in battlestate yellow - drone script doesnt need to return"/-->
          <param name="missiledefense" value="$drones_missiledefense" comment="drone managment group to pass to the Drones"/>
          <param name="attack" value="$drones_attack" comment="drone managment group to pass to the Drones"/>
          <param name="defense" value="$drones_defense" comment="drone managment group to pass to the Drones"/>
          <param name="ratio" value="$droneratio" comment="ratio of the total drones to be deployed (from 0.0 to 1.0)"/>
        </run_script>
      </do_if>
      <do_if value="player.age lt $nextenemyscan">
        <wait exact="$nextenemyscan - player.age" resume="true"/>
      </do_if>
      
      <resume label="yellow"/>
      <!-- ######################################################################################################################################################### -->
      <label name="red"/>
      <!-- check if previous enemies are still in sight, and confirm there are enemies in combat range -->
      <do_all exact="$enemies_g.count" counter="$i" reverse="true">
        <do_if value="not $enemies_g.{$i}.isoperational or not this.ship.mayattack.{$enemies_g.{$i}} or this.ship.distanceto.{$enemies_g.{$i}} gt this.ship.maxradarrange">
          <signal_objects group="$enemies_t.{$enemies_g.{$i}}" param="'return formation'"/>
          <clear_group group="$enemies_t.{$enemies_g.{$i}}"/>
          <append_to_list name="global.$unused_groups" exact="$enemies_t.{$enemies_g.{$i}}"/>
          <remove_value name="$enemies_t.{$enemies_g.{$i}}"/>
          <remove_from_group object="$enemies_g.{$i}" group="$enemies_g"/>
        </do_if>
        <do_elseif value="not $stay_red? and this.ship.distanceto.{$enemies_g.{$i}} lt this.ship.maxcombatrange.turrets">
          <set_value name="$stay_red"/>
        </do_elseif>
      </do_all>
      
      <!-- Scan for (new) Enemies - Active Scan only performed if no Enemies are in Turret Range anymore  -->
      <do_if value="not $stay_red?">
        <find_gravidar_contact name="$enemies_add" object="this.ship" functional="true" maybeattackedby="this.ship" multiple="true">
          <match_distance object="this.ship" max="this.ship.maxcombatrange.turrets"/>
        </find_gravidar_contact>
      </do_if>
      
      <do_if value="not $enemies_add.count and not $stay_red?">
        <remove_value name="$enemies_add"/>
        <resume label="yellow"/>
      </do_if>
      <do_elseif value="$enemies_add.count">
        <add_to_group groupname="$enemies_g" list="$enemies_add"/>
        <remove_value name="$enemies_add"/>
      </do_elseif>
      <remove_value name="$stay_red"/>
      
      <!-- if not already in Battlestate now enter it -->
      <debug_text filter="general" text="'%1 %2 %3 Battlestate Red, Target Group:\n%4'.[player.age,this.name,this.container.name,$enemies_g]"/>
      <do_if value="$battlestate != 'red'">
        <!--activate_battlestate object="this.ship" state="close_hangar"/-->
        <activate_battlestate object="this.ship" state="battlestate_red"/>
        <do_if value="$battlestate == 'green'" comment="create formation for the Drones if previous battlestate was green (without formation)">
          <create_formation object="this.ship" formation="formationshape.pointguard" param="this.ship.size * 0.8"/>
        </do_if>
        <set_value name="$battlestate" exact="'red'"/>
      </do_if>
      
      
      
      <!-- Filter Enemies -->
      
      <do_if value="not $primarytarget.isoperational">
        <set_value name="$primarytarget" exact="$enemies_g.random"/><!-- ToDo: get proper primary Target (this is just a temp measure to prevent an Error) -->
      </do_if>
      <set_turret_targets object="this.ship" preferredtarget="$primarytarget" target="$enemies_g.list"/>
      
      
      <set_value name="$nextenemyscan" min="player.age + 20s" max="player.age + 30s"/>
      <do_if value="$droneratio gt 0.0">
        <run_script name="'ut.cac.com.defense.launchdrones'">
          <!--param name="exittime" value="$nextenemyscan" comment="exiting regulary to perform a scan"/-->
          <param name="missiledefense" value="$drones_missiledefense" comment="drone managment group to pass to the Drones"/>
          <param name="attack" value="$drones_attack" comment="drone managment group to pass to the Drones"/>
          <param name="defense" value="$drones_defense" comment="drone managment group to pass to the Drones"/>
          <param name="ratio" value="$droneratio" comment="ratio of the total drones to be deployed (from 0.0 to 1.0)"/>
        </run_script>
      </do_if>
      <do_if value="player.age lt $nextenemyscan">
        <wait exact="$nextenemyscan - player.age" resume="true"/>
      </do_if>
      
      
      <resume label="red"/>
      <!-- ######################################################################################################################################################### -->
      <label name="check state"/>
      <do_if value="$battlestate == 'green'">
        <resume label="green"/>
      </do_if>
      <do_if value="$battlestate == 'yellow'">
        <resume label="yellow"/>
      </do_if>
      <do_elseif value="$battlestate == 'red'">
        <resume label="red"/>
      </do_elseif>
      <do_else>
        <debug_text filter="error" text="'%1 %2 %3 no valid Battlestate saved: %4 - resetting'.[player.age,this.name,this.container.name,@$battlestate]"/>
        <resume label="init"/>
      </do_else>
    </actions>
  </attention>
  <!--attention min="unknown">
    <actions>
      
    </actions>
  </attention-->
  <on_abort>
    <!-- Script Terminated - set Drones into self-destruct mode and pass them as group via signal, so a replacement DO can recover them -->
  </on_abort>
</aiscript>
