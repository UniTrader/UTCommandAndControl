<?xml version="1.0" encoding="UTF-8" ?>
<aiscript name="player.direct.control" version="30" priority="10" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://utnas/~unitrader/XRebirthxsds/aiscripts.xsd">
  <!--
 rewritten from scratch by UniTrader
 Script for following the Player Looking Direction
  -->
  <params>
    <param name="params" default="false" comment="pass a single Table filled with the wanted param Values here to make calls via list possible (always has priority)"/>
  </params>
 <interrupts>
    <handler comment="Player Undocked - Terminate">
      <conditions>
        <event_object_changed_room object="player.entity"/>
      </conditions>
      <actions>
        <return/>
        <resume label="finish"/>
      </actions>
    </handler>
   
  </interrupts>
    <actions>
      <label name="init"/>
      <!-- get Original Player Pos; set Player to Position with good visibility (first do_if is for bridge mod compatibility)-->
      <set_value name="$originalpos" exact="position.[player.entity.position.x,player.entity.position.y+0.05m,player.entity.position.z]"/>
      <do_if value="player.platform.macro.id == 'capital_bridge2_wrapper_macro'">
        <set_player_entity_position>
          <position x="0" y="5" z="25"/>
        </set_player_entity_position>
      </do_if>
      <do_else>
        <set_player_entity_position>
          <position x="0" y="6" z="-7"/>
        </set_player_entity_position>
      </do_else>
      <!-- wait a second until he falls down -->
      <wait exact="1s"/>
      <!-- save Player Pos as normal Pos to restore constantly -->
      <set_value name="$normalpos" exact="position.[player.entity.position.x,player.entity.position.y+0.005m,player.entity.position.z]"/>
      <set_value name="$boost" exact="false"/>
	  
      
      <!-- create orientation light in front -->
      <transform_position name="$position" refposition="$normalpos" refrotation="rotation.[0deg,0deg,0deg]">
        <position x="0m" y="0m" z="2.5km"/>
      </transform_position>
      <add_effect object="player.platform" effect="'jump_activation_jumpdrive_slow'">
        <position value="$position"/>
      </add_effect>
      
      
      <label name="start"/>
      <set_avoid_collisions object="player.ship" enabled="false"/><!-- this one makes fly-through problems with Stations, so deactivated for now -->
      <do_while value="player.platform.exists ">
        <!-- get Player Looking Direction -->
        <!-- first get Position in front of Player (relative to Sector)- now with 3deg deadzone -->
		
        <do_if value="player.entity.rotation.yaw lt 2deg and player.entity.rotation.yaw gt -2deg and player.entity.rotation.pitch lt 2deg and player.entity.rotation.pitch gt -2deg ">
          <set_value name="$rotation" exact="rotation.[0deg,0deg,0deg]"/>
        </do_if>
        <do_elseif value="player.entity.rotation.yaw gt 178deg and player.entity.rotation.yaw lt -178deg and player.entity.rotation.pitch gt 2deg and player.entity.rotation.pitch lt -2deg ">
          <set_value name="$rotation" exact="rotation.[180deg,0deg,0deg]"/>
        </do_elseif>
		<do_else>
		<set_value name="$rotation" exact="player.entity.rotation"/>
        </do_else>
		 <!-- check if player Jumped, and if toggle boost var and reset pos -->
        <do_if value="player.entity.position.y gt $normalpos.y + 1.02m and player.entity.position.z gt $normalpos.z + 0.5m">
          <set_value name="$boost" exact="not $boost"/>
        </do_if>
        <!-- if player is still falling -set new Pos (workaround for other Platforms) - removed for now -->
        <!--do_elseif value="player.entity.position.y lt $normalpos.y - 0.04m">
          <set_value name="$normalpos" exact="player.entity.position"/>
        </do_elseif-->
		
		<!--Bewegungseinschraenkung-->
		<do_if value="player.entity.position.x gt $normalpos.x + 0.01m and player.entity.position.z gt $normalpos.z + 0.5m or player.entity.position.x lt $normalpos.x - 0.01m and player.entity.position.z gt $normalpos.z + 0.5m">
			<set_player_entity_position>
				<position x="0.01" y="player.entity.position.y" z="player.entity.position.z" />
			</set_player_entity_position>
		</do_if>
		<do_if value="player.entity.position.x gt $normalpos.x + 0.01m and player.entity.position.z lt $normalpos.z - 0.5m or player.entity.position.x lt $normalpos.x - 0.01m and player.entity.position.z lt $normalpos.z - 0.5m">
			<set_player_entity_position>
				<position x="0.01" y="player.entity.position.y" z="player.entity.position.z" />
			</set_player_entity_position>
		</do_if>
		<do_if value="player.entity.position.x gt $normalpos.x + 0.6m and player.entity.position.z lt $normalpos.z + 0.5m ">
			<set_player_entity_position>
				<position x="0.6" y="player.entity.position.y" z="player.entity.position.z" />
			</set_player_entity_position>
		</do_if>
		<do_if value="player.entity.position.x lt $normalpos.x - 0.6m and player.entity.position.z lt $normalpos.z + 0.5m">
			<set_player_entity_position>
				<position x="- 0.6" y="player.entity.position.y" z="player.entity.position.z" />
			</set_player_entity_position>
		</do_if>
		<do_if value="player.entity.position.z lt $normalpos.z - 0.6m">
			<set_player_entity_position>
				<position x="player.entity.position.x" y="player.entity.position.y" z="$normalpos.z - 0.6" />
			</set_player_entity_position>
		</do_if>
		
		<do_if value="player.entity.position.z gt $normalpos.z + 0.5m "> <!--langsam fliegen mit boost -->
			<transform_position name="$position" refposition="position.[0,0,0]" refrotation="$rotation">
				<position  z="if $boost then 1km else 50m"/>
			</transform_position>
			<transform_position name="$position" refposition="player.ship.position" refrotation="player.ship.rotation">
				<position value="$position"/>
			</transform_position>
		</do_if>
		<do_if value="player.entity.position.z gt $normalpos.z + 1.0m "> <!--halbe kraft fliegen mit boost -->
			<transform_position name="$position" refposition="position.[0,0,0]" refrotation="$rotation">
				<position  z="if $boost then 2km else 200m"/>
			</transform_position>
			<transform_position name="$position" refposition="player.ship.position" refrotation="player.ship.rotation">
				<position value="$position"/>
			</transform_position>
		</do_if>
		<do_if value="player.entity.position.z gt $normalpos.z + 2.0m"> <!--volle kraft  mit boost-->
			<transform_position name="$position" refposition="position.[0,0,0]" refrotation="$rotation">
				<position  z="if $boost then 5km else 500m"/>
			</transform_position>
			<transform_position name="$position" refposition="player.ship.position" refrotation="player.ship.rotation">
				<position value="$position"/>
			</transform_position>
		</do_if>
		
		<do_if value="player.entity.position.z lt $normalpos.z - 0.5m "> <!--rueckwaerts ohne boost-->
			<transform_position name="$position" refposition="position.[0,0,0]" refrotation="$rotation">
				<position  z=" - 100m"/>
			</transform_position>
			<transform_position name="$position" refposition="player.ship.position" refrotation="player.ship.rotation">
				<position value="$position"/>
			</transform_position>
		</do_if>
		
		<do_if value="player.entity.position.x lt $normalpos.x - 0.5m and player.entity.position.z lt $normalpos.z + 0.5m and player.entity.position.z gt $normalpos.z - 0.5m"> <!--strafen links-->
			<transform_position name="$position" refposition="position.[0,0,0]" refrotation="$rotation">
				<position x=" - 100m"/>
			</transform_position>
			<transform_position name="$position" refposition="player.ship.position" refrotation="player.ship.rotation">
				<position value="$position"/>
			</transform_position>
		</do_if>
		<do_if value="player.entity.position.x gt $normalpos.x + 0.5m and player.entity.position.z lt $normalpos.z + 0.5m and player.entity.position.z gt $normalpos.z - 0.5m " > <!--strafen rechts -->
			<transform_position name="$position" refposition="position.[0,0,0]" refrotation="$rotation">
				<position x="100m" />
			</transform_position>
			<transform_position name="$position" refposition="player.ship.position" refrotation="player.ship.rotation">
				<position value="$position"/>
			</transform_position>
		</do_if>
		
        <do_if value="player.entity.position.z lt $normalpos.z - 0.5m " > <!--schiffsaurichtung nach manoever-->
           <create_orientation name="$rotation" refobject="player.ship" orientation="look_at"> 
            <position value="$position"/>
          </create_orientation>
		</do_if>
       <do_else>
          <create_orientation name="$rotation" refobject="player.ship" orientation="look_away">
            <position value="$position"/>
          </create_orientation>
       </do_else> 
		<do_if value="player.entity.position.z gt $normalpos.z + 0.5m"> <!-- vorwaertsflug mit boost-->
			<move_to object="player.ship" destination="player.zone" boost="$boost" abortpath="true" avoid="false">
				<position value="$position" space="player.zone"/>
				<rotation value="$rotation"/>
				<interrupt_after_time time="0s"/>
			</move_to>
			<remove_effect object="player.platform" effect="'jump_activation_jumpdrive_slow'"/>	
			<transform_position name="$position" refposition="$normalpos" refrotation="rotation.[0deg,0deg,0deg]">
				<position x="0m" y="0m" z="2.0km"/>
			</transform_position>
			<add_effect object="player.platform" effect="'jump_activation_jumpdrive_slow'">
				<position value="$position"/>
			</add_effect>
		</do_if>
		<do_if value="player.entity.position.z lt $normalpos.z - 0.5m ">  <!-- rueckwaertsflug ohne boost -->
			<move_to object="player.ship" destination="player.zone" abortpath="true" avoid="false" reverse="true" >
				<position value="$position" space="player.zone"/>
				<rotation value="$rotation"/>
				<interrupt_after_time time="0s"/>
			</move_to>
			<remove_effect object="player.platform" effect="'jump_activation_jumpdrive_slow'"/>	
			<transform_position name="$position" refposition="$normalpos" refrotation="rotation.[0deg,0deg,0deg]">
				<position x="0m" y="0m" z="2.0km"/>
			</transform_position>
			<add_effect object="player.platform" effect="'jump_activation_jumpdrive_slow'">
				<position value="$position"/>
			</add_effect>
		</do_if>
		<do_if value="player.entity.position.x lt $normalpos.x - 0.5m and player.entity.position.z lt $normalpos.z + 0.5m and player.entity.position.z gt $normalpos.z - 0.5m or player.entity.position.x gt $normalpos.x + 0.5m and player.entity.position.z lt $normalpos.z + 0.5m and player.entity.position.z gt $normalpos.z - 0.5m"> <!--strafen links und rechts-->
			<move_strafe object="player.ship" destination="player.zone" abortpath="true" avoid="false" >
				<position value="$position" space="player.zone"/>
				<interrupt_after_time time="0s"/>
			</move_strafe>
			<remove_effect object="player.platform" effect="'jump_activation_jumpdrive_slow'"/>	
			<transform_position name="$position" refposition="$normalpos" refrotation="rotation.[0deg,0deg,0deg]">
				<position x="0m" y="0m" z="2.0km"/>
			</transform_position>
			<add_effect object="player.platform" effect="'jump_activation_jumpdrive_slow'">
				<position value="$position"/>
			</add_effect>
		</do_if>
				
		<wait exact="100ms"/>
		<!--label="finish"-->
               	
	</do_while>
      <label name="finish"/>
      <do_if value="player.platform.exists">
        <set_player_entity_position>
          <position value="$originalpos"/>
        </set_player_entity_position>
		<set_value name="$direct_control" exact="false"/>
        <stop_moving object="this.ship" immediate="true"/>
        <set_avoid_collisions object="player.ship" enabled="true"/>
        <remove_effect object="player.platform" effect="'jump_activation_jumpdrive_slow'"/>
        <signal_objects object="player.primaryship" param="'Restart Platform Commands'"/>
      </do_if>
    </actions>
  <on_abort>
    <do_if value="player.platform.exists">
      <set_player_entity_position>
        <position value="$originalpos"/>
      </set_player_entity_position>
	  
	  <stop_moving object="this.ship" immediate="true"/>
      <set_avoid_collisions object="player.ship" enabled="true"/>
      <remove_effect object="player.platform" effect="'jump_activation_jumpdrive_slow'"/>
	  <signal_objects object="player.primaryship" param="'Restart Platform Commands'"/>
    </do_if>
  </on_abort>
</aiscript>
