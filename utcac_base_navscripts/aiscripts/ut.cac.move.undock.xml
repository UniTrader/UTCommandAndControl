<?xml version="1.0" encoding="UTF-8" ?>
<aiscript name="ut.cac.move.undock" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://utnas/~unitrader/XRebirthxsds/aiscripts.xsd">
  <!--

 rewritten from scratch by UniTrader
  
Script to Dock or Park an Object

  -->
  <params>
    <param name="params" default="false" comment="pass a single Table filled with the wanted param Values here to make calls via list possible (always has priority)"/>
    <param name="fast" default="false" comment="Fast Undocking - skip all unecesaryMovement, just disconnect and signal Objects"/>
  </params>
  <attention min="unknown">
    <actions>
      <!-- first decode the $params to the Variables -->
      <do_if value="$params">
        <do_if value="$params.$fast?">
          <set_value name="$fast" exact="$params.$fast"/>
        </do_if>
      </do_if>
      
      <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Script started with Params:\n$fast: %3'.[this.name,this.container.name,$fast]"/>
      
      <!-- Verify Input and Situation -->
      
      <set_command_action commandaction="commandaction.undocking"/>
      <do_if value="this.$ut_cac?"><set_value name="this.$ut_cac.$isactive"/></do_if>
      
      
      <do_if value="not (this.ship.isclass.ship_xl or this.ship.isclass.ship_l)" comment="use this part if the Ship can Dock internally - preffered over external Parking">
        <resume label="undocking"/>
      </do_if>
      <do_else>
        <resume label="unparking"/>
      </do_else>
      
      
      <!-- ############################################################################ -->
      <!-- ############################################################################ -->
      <!-- Movement Steps for Unocking-->
      <label name="undocking"/>
      
      <!-- for now simply passing on to Vanilla -->
      <run_script name="'move.undock'"/>
      
      <resume label="finish"/>
      
      <!-- Movement Steps for Unparking -->
      <label name="unparking"/>
      
      
      <set_value name="$parked" exact="this.ship.parkedat" />
      <do_if value="$parked.exists">
      <!-- HACK: this should find the nearest slot which *should* be the one that we are parked at -->
        <do_if value="$parked.isclass.container">
          <set_value name="$undockfrom" exact="$parked" />
        </do_if>
        <do_else>
          <set_value name="$undockfrom" exact="$parked.container" />
        </do_else>
        <find_tradeoffer_parking_slot name="$freeslot" object="$undockfrom" refobject="this.ship" includeoccupied="true" />
        
        <!-- confirm its indeed  the right unpark Position - if not check the queue and if you dont find it there just undock directly -->
        <get_trade_parking_pos ship="this.ship" tradedock="$freeslot" space="$undockfrom.zone" approach="false" position="$checkpos"/>
        <do_if value="not (this.ship.distanceto.{$checkpos} lt 100m)">
          <set_value name="$freeslot" exact="null"/>
          <find_tradeoffer_parking_slot name="$parkingslots" object="$undockfrom" includeoccupied="true" multiple="true" />
          <do_all exact="$parkingslots.count" counter="$i">
            <do_if value="global.$parking_queue.{$parkingslots.{$i}.component}.{1} == this.ship">
              <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Found parking Slot based on Queue List'.[this.name,this.container.name]"/>
              <set_value name="$freeslot" exact="$parkingslots.{$i}.component"/>
              <break/>
            </do_if>
          </do_all>
          <remove_value name="$parkingslots"/>
        </do_if>
        
        <do_if value="$freeslot">
          
          <!-- Remove ourselves from the park queue and signal the others in it to advance -->
          <disconnect_from_trade_location ship="this.ship" />
          <do_if value="global.$parking_queue.{$freeslot.component}.{1} == this.ship">
            <remove_value name="global.$parking_queue.{$freeslot.component}.{1}"/>
          </do_if>
          <do_else>
           <debug_text filter="error" text="'%1 %2 Not first in Parking Slot Queue anymore!!!'.[this.name,this.container.name]"/>
          </do_else>
          <signal_objects object="$freeslot.component" param="'parking queue update'" param2="$freeslot"/>
          <signal_objects object="$undockfrom" param="'parking queue update'" param2="$freeslot" delay="1s"/>
          
          <get_trade_parking_pos ship="this.ship" tradedock="$freeslot" space="$undockfrom.zone" approach="true" position="$undockpos" quadrant="$quadrant"/>
          <do_if value="false" comment="exclude Stations here which cannt take the modified undock target pos"/>
          <do_elseif value="false" comment="include stations here which have an inverted queue">
            <transform_position name="$undockpos" refposition="$undockpos" refrotation="$undockrot" >
              <position x="0m" y="0 - this.ship.height * 1.5" z="0m"/>
            </transform_position>
          </do_elseif>
          <do_else>
            <transform_position name="$undockpos" refposition="$undockpos" refrotation="$undockrot" >
              <position x="0m" y="this.ship.height * 1.5" z="0m"/>
            </transform_position>
          </do_else>
          <set_avoid_collisions object="this.ship" enabled="false" />
          <do_if value="($quadrant == quadrant.left) or ($quadrant == quadrant.right)">
            <move_strafe object="this.ship" destination="$undockfrom.zone" abortpath="false" finishonapproach="true">
              <position value="$undockpos" />
              <rotation value="this.ship.rotation" />
            </move_strafe>
            <set_value name="$unparkquadrants" exact="[$quadrant.inverse, quadrant.front]"/>
          </do_if>
          <do_elseif value="$quadrant == quadrant.back">
            <move_to object="this.ship" destination="$undockfrom.zone" abortpath="false" finishonapproach="true">
              <position value="$undockpos" />
              <rotation value="this.ship.rotation" />
            </move_to>
            <set_value name="$unparkquadrants" exact="[quadrant.front, quadrant.none]"/>
          </do_elseif>
          <do_else>
            <move_to object="this.ship" destination="$undockfrom.zone" reverse="true" abortpath="false" finishonapproach="true">
              <position value="$undockpos" />
              <rotation value="this.ship.rotation" />
            </move_to>
            <set_value name="$unparkquadrants" exact="[quadrant.back, quadrant.none]"/>
          </do_else>
          
        </do_if>
        <do_else>
          <disconnect_from_trade_location ship="this.ship" />
          <set_value name="$unparkquadrants" exact="[quadrant.front, quadrant.none]"/>
          <signal_objects object="$undockfrom" param="'parking queue update'" param2="$freeslot" delay="1s"/>
        </do_else>
        
        
        <!-- Removed because of restructure: move out of the Way of the next ship if someone is waiting, then Signal Dock is free -->
        <do_if value="false" comment="$undockfrom.exists and $undockfrom.tradenpc.exists and $undockfrom.tradenpc.$park_queue? and $undockfrom.tradenpc.$park_queue.{$freeslot.component}?">
          <get_safe_pos result="$safepos" object="this.ship" zone="this.zone" radius="this.ship.size" directionobject="this.ship" direction="$unparkquadrants.{1}" direction2="$unparkquadrants.{2}" ignored="$undockfrom" min="this.ship.size + $undockfrom.tradenpc.$park_queue.{$freeslot.component}.size"/>
          <move_to destination="this.zone" object="this.ship" usehighways="false" forceposition="false" abortpath="false" finishonapproach="true"/>
        </do_if>
        <set_avoid_collisions object="this.ship" enabled="true" />
        
        <!-- just in case, move to a safepos -->
        <!--Don't ignore this ship. Use it to avoid finding a safepos in the parking position.-->
        <do_if value="$undockfrom.exists">
          <create_position_outside_boundingbox name="$safepos" component="$undockfrom" distance="this.ship.size">
            <position object="this.ship"/>
          </create_position_outside_boundingbox>
          <get_safe_pos result="$safepos" allowyaxis="true"  radius="this.ship.size" zone="this.zone" x="$safepos.x" y="$safepos.y" z="$safepos.z"/>
        </do_if>
        <do_else>
          <get_safe_pos object="this.ship" radius="this.ship.size * 1.5" zone="this.zone" directionobject="this.ship" direction="$unparkquadrants.{1}" direction2="$unparkquadrants.{2}" angle="45deg" result="$safepos"/>
        </do_else>
        <set_value name="this.$mayabortpath" comment="tell following movement Script that the remainder of the Path is irrelevant"/>
        <move_to destination="this.zone" object="this.ship" usehighways="false" forceposition="false" abortpath="false" finishonapproach="true">
          <position value="$safepos"/>
          <interrupt>
            <conditions>
              <event_object_approaching_waypoint object="this.ship" lastwaypoint="false"/>
            </conditions>
            <actions>
              <remove_value name="this.$mayabortpath"/>
            </actions>
          </interrupt>
          <interrupt_after_time time="30s"/>
        </move_to>
      </do_if>
      
      
      <resume label="finish"/>
      
      <!-- Cleanup -->
      <label name="finish"/>
      
      
    </actions>
  </attention>
  <on_abort>
    <disconnect_from_trade_location ship="this.ship" />
    <!-- Signal next Ship in Queue to move to prep Pos -->
    <signal_objects object="$freeslot.component" param="'parking queue update'" param2="$freeslot"/>
    <signal_objects object="$undockfrom" param="'parking queue update'" param2="$freeslot" delay="1s"/>
    <set_avoid_collisions object="this.ship" enabled="true" />
    <clear_collision_filter object="this.ship"/>
    <!-- ToDo: make parent Order Interruptable again -->
  </on_abort>
</aiscript>
