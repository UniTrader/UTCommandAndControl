<?xml version="1.0" encoding="UTF-8" ?>
<aiscript name="ut.cac.move.jump" version="30" priority="10" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://utnas/~unitrader/XRebirthxsds/aiscripts.xsd">
  <!--

 rewritten from scratch by UniTrader
  
 Routine for Jumping (also takes care of Groups jumping simultaneously, just add a Signal Handler to your follow/Escort Script )

ToDo:
 currently doesnt check if we Jump to the same Sector or skip some on the way - similiar to nonstop and forcejump combined from the vanilla script (may keep this behavior though since it should be responsibility of the Nav Script to take care of this)

  -->
  <params>
    <param name="params" default="false" comment="pass a single Table filled with the wanted param Values here to make calls via list possible (always has priority)"/>
    <param name="destination" default="false" comment="Destination Sector, or Object to Jump to (Jump Beacon or Object for random Jump in case of group Jumps) - will jump as close as possible and exit, finer movements are for other scripts"/>
    <param name="type" default="false" comment="use a certain type of Jump, like 'beacon', 'random', 'auto' or 'emergency'"/>
    <!-- explaination of the Jump Types: 
    'beacon' - jump to the closest Jump Beacon of the Destination (random one if the Sector itself is the Destination)
    'random' - jump to a random Object in the Sector (bigger object Sizes are more likely, but all are possible)
    'auto' - prefer beacons, but if Enemies are on every location or the Destination is really remote (no JB nearby, but many Objects) try a random jump, maybe you are lucky
      -> in case no JBs are available in the destination Sector a random Jump will be performed
    'object' - jump to a certain Object, like a JB (same as 'random' just with a certain Object) - only to be used internally for Group Jumps
    -->
    
    <param name="ignorefuel" default="false" comment="ignore jump fuel requirements (only to be used in special cases e.g. plot missions)"/>
    
    <!-- Stuff necesary for coordinated Group Jumps -->
    <param name="leader" default="null" comment="the formation leader/object which coordinates the Jump"/>
    <param name="leader_preparegroup" default="null" comment="the group of Ships the Leader waits for (if you dont specify a leader this will be the Group the Ship waits for to prepare as if it were the leader)"/>
    <param name="leader_ready" default="false" comment="leader is already charging JD because we missed the initial Jump Event - skipe some sync steps to possibly also make it immediately (or exit immediately if not possible to let other scripts handle the catchup)"/>
  </params>
  <interrupts>
  </interrupts>
  <patch sinceversion="30">
    <do_if value="$followers_preparing?">
      <set_value name="$leader_preparegroup" exact="$followers_preparing"/>
      <remove_value name="$followers_preparing"/>
    </do_if>
  </patch>
  <attention min="unknown">
    <actions>
      <!-- first decode the $params to the Variables -->
      <do_if value="$params">
        <do_if value="$params.$destination?">
          <set_value name="$destination" exact="$params.$destination"/>
        </do_if>
        <do_if value="$params.$type?">
          <set_value name="$type" exact="$params.$type"/>
        </do_if>
        <do_if value="$params.$ignorefuel?">
          <set_value name="$ignorefuel" exact="$params.$ignorefuel"/>
        </do_if>
        <do_if value="$params.$leader?">
          <set_value name="$leader" exact="$params.$leader"/>
        </do_if>
        <do_if value="$params.$leader_preparegroup?">
          <set_value name="$leader_preparegroup" exact="$params.$leader_preparegroup"/>
        </do_if>
      </do_if>
      
      <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 %3 Script started with Params:\n$destination: %4 , $type: %5 , $ignorefuel: %6 , $leader: %7 , $leader_preparegroup: %8'.[player.age,this.name,this.container.name,$destination.knownname,$type,$ignorefuel,$leader,$leader_preparegroup]"/>
      
      <!-- if Jump Type hat not been set - use Entity default Value or fall back to general defaults depending on Faction -->
      <do_if value="not $type">
        <do_if value="this.$ut_cac.$jumptype?">
          <set_value name="$type" exact="this.$ut_cac.$jumptype"/>
        </do_if>
        <do_else>
          <!-- Criminal Factions prefer random Jumps to surprise (is a bit hacky because it doesnt take EXP into account)-->
          <do_if value="this.owner == faction.enemy or this.owner == faction.smuggler or this.owner == faction.criminal or this.owner == faction.sovereignsyndicate or this.owner == faction.hereticvanguards or this.owner == faction.reivers">
            <set_value name="$type" exact="'random'"/>
          </do_if>
          <!-- Police Factions always prefer Beacon Jumps because they guarantee arrival time, also Inexpierienced Captains use this as default mode of operation (or player ones if not told otherwise)-->
          <do_elseif value="this.owner.ispolice or this.skill.navigation le 3 or this.owner == faction.player">
            <set_value name="$type" exact="'beacon'"/>
          </do_elseif>
          <!-- Expierienced Captains may do Random Jumps if there are Enemies near all beacons -->
          <do_else>
            <set_value name="$type" exact="'auto'"/>
          </do_else>
        </do_else>
      </do_if>
      
      
      <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 %3 Jump Script started with parameters:\n$destination: %4, $type: %5, $ignorefuel: %6, $leader: %7, $leader_preparegroup: %8'.[player.age,this.name,this.container.name,$destination,$type,$ignorefuel,$leader,$leader_preparegroup]"/>
      
      <!-- maybe use a light variant which only undocks and cancels boosters, not the other stuff with leaving formations etc. -->
      <!--run_script name="'ut.cac.move.free'" /-->
      <!-- Safe State assumed when calling this Script now for more fluid movement Type switching -->
      
      <!-- sanitize Input -->
      <!-- abort in case we try to jump into a tube -->
      <do_if value="$destination.isclass.highway">
        <debug_text filter="error" text="'%1 %2 %3 tried to Jump into Tube - aborting!'.[player.age,this.name,this.container.name]"/>
        <return value="false"/>
      </do_if>
      <!-- in case the Destination is a Ship inside a Tube get its Exit Waypoint and jump as near as possible there -->
      <!-- no special behavior in case the Pilot didnt annnunce his Target - just jump to him as close as possible -->
      <do_if value="$destination.isclass.ship">
        <do_if value="$destination.zone.isclass.highway">
          <do_if value="$destination.pilot.$waypoint?">
            <set_value name="$destination" exact="$destination.pilot.$waypoint"/>
          </do_if>
        </do_if>
      </do_if>
      <do_if value="not ( $destination.isclass.sector or @$destination.sector.exists ) or not this.sector.exists">
        <debug_text filter="error" text="'%1 %2 %3 Jumpsectors invalid - aborting!'.[player.age,this.name,this.container.name]"/>
        <return value="false"/>
      </do_if>
      
      <!-- check if we really can do this Jump -->
      <find_object_component name="$jumpdrive" object="this.ship" class="class.jumpdrive" checkoperational="false"/>
      <do_if value="$jumpdrive == null">
        <debug_text filter="error" text="'%1 %2 %3 No Jumpdrive - aborting!'.[player.age,this.name,this.container.name]"/>
        <return value="false"/>
      </do_if>
      <do_if value="not $jumpdrive.isoperational">
        <debug_text filter="error" text="'%1 %2 %3 No operational Jumpdrive - wait till restored (will wait silently for now! )'.[player.age,this.name,this.container.name]"/>
        <wait>
          <interrupt>
            <conditions>
              <event_object_hull_above_function_threshold object="$jumpdrive"/>
            </conditions>
          </interrupt>
        </wait>
      </do_if>
      
      <!-- save the slow charge effect in a var for later use -->
      <do_if value="$jumpdrive.macro.ismacro.props_surf_ar_jumpdrive_macro">
        <set_value name="$slowchargeeffect" exact ="'jump_activation_jumpdrive_slow'"/>
      </do_if>
      <do_elseif value="$jumpdrive.macro.ismacro.props_surf_ar_jumpdrive_l_macro">
        <set_value name="$slowchargeeffect" exact ="'jump_activation_jumpdrive_l_slow'"/>
      </do_elseif>
      
      <!-- get the Object which acts as Jump Beacon -->
      <do_if value="$type == 'beacon' or $type == 'auto'">
        <!-- get a regular JB -->
        <do_if value="$destination.isclass.sector">
          <!-- just passing through the Cluster -->
          <!-- find a random beacon were are no Enemies nearby -->
          <find_object name="$beacons" space="$destination" knownto="this.owner" checkoperational="true" multiple="true">
            <match_any>
              <match class="class.jumpbeacon"/>
              <match_child class="class.jumpbeacon" checkoperational="true"/>
            </match_any>
          </find_object>
          <do_all exact="$beacons.count">
            <set_value name="$beacon" exact="$beacons.random"/>
            <find_object name="$enemy" space="$beacon.zone" knownto="this.owner" >
              <match_relation object="this.ship" comparison="le" relation="kill"/>
              <match_size min="100m"/>
            </find_object>
            <!-- get the first beacon without enemies nearby (fallback in case there are enemies everywhere is the last one checked ) -->
            <do_if value="not $enemy.exists">
              <set_value name="$beacon_clear"/>
              <break/>
            </do_if>
          </do_all>
          <!-- we dont know any beacons in the Destination Sector - lock onto a random one -->
          <do_if value="not @$beacon.exists">
            <find_object name="$beacon" space="$destination" checkoperational="true">
              <match_any>
                <match class="class.jumpbeacon"/>
                <match_child class="class.jumpbeacon" checkoperational="true"/>
              </match_any>
            </find_object>
            <set_known object="@$beacon" known="true"/>
            <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 %3 Selected Beacon in %4 randomly because we dont know about any beacons (Passing Case)'.[player.age,this.name,this.container.name,@$beacon.zone.knownname]"/>
          </do_if>
          <do_else>
            <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 %3 Selected Beacon %4 from set of %5 (Passing Case)'.[player.age,this.name,this.container.name,@$beacon.zone.knownname,$beacons]"/>
          </do_else>
        </do_if>
        <!-- we got a Jumpbeacon directly as Input - Use it -->
        <do_elseif value="$destination.isclass.jumpbeacon">
          <set_value name="$beacon" exact="$destination"/>
          <set_value name="$type" exact="'beacon'"/>
        </do_elseif>
        <do_else>
          <!-- final Cluster on Path - jump to the closest beacon, but also watch for enemies -->
          <find_object name="$beacons" space="$destination.sector"  knownto="this.owner" checkoperational="true" multiple="true">
            <match_any>
              <match class="class.jumpbeacon"/>
              <match_child class="class.jumpbeacon" checkoperational="true"/>
            </match_any>
          </find_object>
          <set_value name="$distance" exact="1e12m"/>
          <do_all exact="$beacons.count" counter="$i">
            <do_if value="$destination.distanceto.{$beacons.{$i}} lt $distance"/>
              <set_value name="$distance" exact="$destination.distanceto.{$beacons.{$i}}"/>
              <set_value name="$nearbeacon"/>
              <find_object name="$enemy" space="$beacons.{$i}.zone" knownto="this.owner" >
                <match_relation object="this.ship" comparison="le" relation="kill"/>
                <match_size min="100m"/>
              </find_object>
              <do_if value="not $enemy.exists">
                <set_value name="$safebeacon"/>
              </do_if>
          </do_all>
          <do_if value="$safebeacon?">
            <set_value name="$beacon_clear"/>
            <set_value name="$beacon" exact="$safebeacon"/>
          </do_if>
          <do_elseif value="$nearbeacon?">
            <set_value name="$beacon" exact="$nearbeacon"/>
          </do_elseif>
          <!-- we dont know any beacons in the Destination Sector - lock onto a random one -->
          <do_if value="not @$beacon.exists">
            <find_object name="$beacon" space="$destination.sector" class="class.jumpbeacon" checkoperational="true">
              <match_any>
                <match class="class.jumpbeacon"/>
                <match_child class="class.jumpbeacon" checkoperational="true"/>
              </match_any>
            </find_object>
            <set_known object="@$beacon" known="true"/>
            <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 %3 Selected Beacon in %4 randomly because we dont know about any beacons (Final Approach Case)'.[player.age,this.name,this.container.name,@$beacon.zone.knownname]"/>
          </do_if>
          <do_else>
            <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 %3 Selected Beacon %4 from set of %5 (final Approach case)'.[player.age,this.name,this.container.name,@$beacon.zone.knownname,$beacons]"/>
          </do_else>
        </do_else>
      </do_if>
      <do_if value="$type == 'random' or ( $type == 'auto' and not $beacon_clear? ) or ( $type == 'beacon' and not @$beacon.exists )">
        <!-- use any Object as JB (either on purpose or if there are enemies near all known beacons or if there are no beacons in destination Sector) -->
        <!-- prefer big Objects - pick a random min size and find something bigger acting as JB resulting in an increasing probability with increasing size -->
        <!-- if no Object is found try again with half the size 4 times and then leave out the minsize requirement to guarantee finding an object -->
        <do_if value="$destination.isclass.sector">
          <set_value name="$space" exact="$destination"/>
        </do_if>
        <do_else>
          <set_value name="$space" exact="$destination.sector"/>
        </do_else>
        <set_value name="$minsize" min="1km" max="5km"/>
        <find_object name="$beacon" space="$space">
          <match_size min="$minsize"/>
          <match_parent class="class.highway" negate="true"/>
        </find_object>
        <do_if value="not $beacon.exists">
          <do_all exact="4">
            <set_value name="$minsize" exact="$minsize / 2"/>
            <find_object name="$beacon" space="$space">
              <match_size min="$minsize"/>
              <match_parent class="class.highway" negate="true"/>
            </find_object>
            <do_if value="$beacon.exists">
              <break/>
            </do_if>
          </do_all>
          <do_if value="not $beacon.exists">
            <find_object name="$beacon" space="$space"/>
          </do_if>
        </do_if>
        <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 %3 Selected Random Beacon %4'.[player.age,this.name,this.container.name,$beacon.knownname]"/>
      </do_if>
      <do_if value="$type == 'object'">
        <set_value name="$beacon" exact="$destination"/>
        <find_object name="$enemy" space="$beacon.zone" knownto="this.owner" >
          <match_relation object="this.ship" comparison="le" relation="kill"/>
          <match_size min="100m"/>
        </find_object>
        <do_if value="not $enemy.exists">
          <set_value name="$beacon_clear"/>
        </do_if>
      </do_if>
      
      <do_if value="not $beacon.exists">
        <debug_text filter="error" text="'%1 %2 %3 Jumping Aborted - no valid beacon Found (should not be possible) $destination: %4'.[player.age,this.name,this.container.name,$destination.knownname]"/>
      </do_if>
      
      <set_command_action commandaction="commandaction.jumping" param="$destination" />
      <do_if value="this.$ut_cac?">
        <set_value name="this.$ut_cac.$isactive"/>
      </do_if>
      
      <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 %3 Destination Beacon: %4 in %5 // %6'.[player.age,this.name,this.container.name,$beacon.knownname,$beacon.sector.knownname,$beacon.zone.knownname]"/>
      
      <!-- if leader is already jumping try to keep up if possible or just exit -->
      <do_if value="$leader_ready">
        <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 %3 Leader already jumping, performing fast jump'.[player.age,this.name,this.container.name]"/>
        <do_if value="this.ship.cargo.{ware.fuelcells}.count lt this.ship.jumpcostto.{$destination}">
          <!-- not enough fuel, give up-->
          <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 %3 Not enough Fuel, give up'.[player.age,this.name,this.container.name]"/>
          <return/>
        </do_if>
        <do_if value="$jumpdrive.cooldowntimeleft gt 0">
          <!-- not cooled down, give up-->
          <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 %3 Not cooled Down, give up'.[player.age,this.name,this.container.name]"/>
          <return/>
        </do_if>
        <!-- we can jump immediately -->
        <resume label="jump"/>
      </do_if>
      
      <!-- start movement to idle Target Pos (to cover Jump Preperations) -->
      <move_to object="this.ship" abortpath="true" destination="this.zone" commandaction="false" >
        <position space="this.zone" object="this.ship" z="20km"/>
        <rotation value="this.ship.rotation"/>
        <interrupt_after_time time="0s"/>
      </move_to>
      
      <!-- Signal our Intention to Jump and pass a list where everyone who needs to prepare (like docking Ships) can add himself to and wait a second to make sure everyone does -->
      <do_if value="$leader and $leader_preparegroup">
        <add_to_group object="this.ship" groupname="$leader_preparegroup"/>
      </do_if>
      <do_else>
        <create_group groupname="$leader_preparegroup"/>
      </do_else>
      <signal_objects object="this.ship" param="'travel jump prep'" param2="[ if $leader then $leader else this.ship , $beacon ]" param3="$leader_preparegroup"/>
      <wait min="100ms" max="200ms"/>
      
      <!-- Slow Jumpdrive Charge in case we dont have enough Fuel - fuel check and refueling are somewhere else -->
      <do_if value="this.ship.cargo.{ware.fuelcells}.count lt this.ship.jumpcostto.{$destination}">
        <!-- not enough fuel, don't use fuel and delay the jump -->
        <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 %3 Not enough Fuel, slow charge'.[player.age,this.name,this.container.name]"/>
        <set_value name="$ignorefuel" exact="true"/>
        <!-- slow charge jump effects - will be removed just before firing up the JD -->
        <do_if value="$slowchargeeffect?">
          <add_effect object="$jumpdrive" effect="$slowchargeeffect"/>
          <set_value name="$slowcharge"/>
        </do_if>
        <wait min="590s" max="610s"/>
      </do_if>
      
      <!-- slow charge jump effects - will be removed just before firing up the JD - now also used during cooldown -->
      <do_if value="$slowchargeeffect? and not $slowcharge?">
        <add_effect object="$jumpdrive" effect="$slowchargeeffect"/>
        <set_value name="$slowcharge"/>
      </do_if>
      
      <!-- wait till JD has cooled down for the next Jump -->
      <do_while value="$jumpdrive.cooldowntimeleft gt 0">
        <wait min="($jumpdrive.cooldowntimeleft + 2)s" max="($jumpdrive.cooldowntimeleft + 4)s"/>
      </do_while>
      <set_value name="$debug_cooldowntime1" exact="$jumpdrive.cooldowntimeleft"/>
      
      <!-- Leader of Group Jump - wait till everyone is ready and give the Start Signal -->
      <do_if value="not $leader.exists">
        <do_while value="$leader_preparegroup.count">
          <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 %3 Waiting for followers to be ready\nPreparegroup: %4 ( %5 Members )'.[player.age,this.name,this.container.name,$leader_preparegroup,$leader_preparegroup.count]"/>
          <wait max="1min">
            <interrupt>
              <conditions>
                <check_any>
                  <event_object_signalled object="this.ship" param="'preparegroup shrunk'"/>
                  <event_object_changed_zone group="$leader_preparegroup"/>
                </check_any>
              </conditions>
              <actions>
                <do_if value="event.name == 'event_object_changed_zone'">
                  <!-- what the hell? someone we are waiting for has flown away or jumped without telling anyone - Kick him out of Group! -->
                  <debug_text filter="error" text="'%1 %2 %3 What the Hell? Follower %4 switched Zones or Jumped without telling anyone! - Dont wait for that ******'.[player.age,this.name,this.container.name,event.object.knownname]"/>
                  <remove_from_group group="$leader_preparegroup" object="event_object"/>
                </do_if>
              </actions>
            </interrupt>
          </wait>
        </do_while>
      </do_if>
      <!-- if we are a follower in a Group Jump - remove ourselves from the prep group and wait for the Start Signal -->
      <do_else>
        <remove_from_group group="$leader_preparegroup" object="this.ship"/>
        <signal_objects object="$leader" param="'preparegroup shrunk'"/>
        <wait>
          <interrupt>
            <conditions>
              <check_any>
                <event_object_signalled object="$leader" param="'travel jump start'"/>
                <event_object_changed_zone object="$leader"/>
              </check_any>
            </conditions>
            <actions>
              <do_if value="event.name == 'event_object_changed_zone'">
                <!-- what the hell? the leader has flown away or jumped without telling anyone - Abort! -->
                <debug_text filter="error" text="'%1 %2 %3 What the Hell? Jump Leader %4 switched Zones or Jumped without telling anyone! - Aborting'.[player.age,this.name,this.container.name,$leader.knownname]"/>
                <return/>
              </do_if>
              <do_if value="event.param2.{2} != $destination">
                <!-- what the hell? the leader boosts to a diffrent place than announcde - Abort! -->
                <debug_text filter="error" text="'%1 %2 %3 What the Hell? Jump Leader %4 Jumps to a diffrent Place than initially announced! - Aborting'.[player.age,this.name,this.container.name,$leader.knownname]"/>
                <return/>
              </do_if>
            </actions>
          </interrupt>
        </wait>
      </do_else>
      
      <set_value name="$debug_cooldowntime2" exact="$jumpdrive.cooldowntimeleft"/>
      
      <label name="jump"/>
      <!-- Preperations Done - Tell everyone to start and add ourselves to the blocking group to prevent too fast advancing on the leaders part -->
      <signal_objects object="this.ship" param="'travel jump start'" param2="[ if $leader then $leader else this.ship , $beacon ]" param3="$leader_preparegroup"/>
      <add_to_group object="this.ship" groupname="$leader_preparegroup"/>

      <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 %3 Charging Jump Drive! 10 Precent, 20, 30....'.[player.age,this.name,this.container.name]"/>
      <!-- actually JUMP!!! -->
      <do_if value="this.ship == player.ship">
        <!-- cache Assets of destination if player is on board to make transition smooth -->
        <precache_hint zone="$beacon.zone"/>
      </do_if>
      <do_if value="$slowcharge?">
        <remove_effect object="$jumpdrive" effect="$slowchargeeffect"/>
      </do_if>
      <!--activate_battlestate object="this.ship" state="battlestate_jumpprep"/>
      <stop_boost object="this.ship" comment="slow movement may be fine... especially if the Ship is currently clearing an Exit Area or something.."/-->
      <remove_value name="this.$mayabortpath"/>
      <do_if value="not ( this.race == race.xenon or this.race == race.drone)" comment="Computer Races sync the Start perfectly, and a bit earlier than non-computer Races">
        <wait min="100ms" max="3s" sinceversion="30" comment="de-perfect perfect synchromisation"/>
      </do_if>
      <jump result="$firstresult" object="this.ship" zone="$beacon.zone" ignorefuel="$ignorefuel" commandaction="false" >
        <safepos allowyaxis="true" value="$beacon.position" radius="this.ship.size"/>
        <orientation refobject="$beacon" orientation="look_away"/>
        <interrupt_after_time time="0s"/>
      </jump>
      <set_value name="$result" exact="@$firstresult"/>
      <set_value name="$debug_cooldowntime3" exact="$jumpdrive.cooldowntimeleft"/>
      <move_to object="this.ship" abortpath="false" destination="this.zone" commandaction="false" >
        <position space="this.zone" object="this.ship" z="20km"/>
        <rotation value="this.ship.rotation"/>
        <interrupt_after_time time="$jumpdrive.chargetime + 5s"/>
        <interrupt>
          <conditions>
            <check_any>
              <event_object_jump_completed object="this.ship"/>
              <event_object_changed_zone object="this.ship" zone="$beacon.zone" comment="workaround because jump_completed doesnt seem to trigger"/>
              <event_object_jump_aborted object="this.ship"/>
            </check_any>
          </conditions>
          <actions>
            <do_if value="event.name == 'event_object_jump_completed' or event.name == 'event_object_changed_zone'">
              <set_value name="$result" exact="true"/>
            </do_if>
            <do_elseif value="event.name == 'event_object_jump_aborted'">
              <set_value name="$result" exact="false"/>
            </do_elseif>
          </actions>
        </interrupt>
      </move_to>
      <set_value name="$debug_cooldowntime4" exact="$jumpdrive.cooldowntimeleft"/>
      <stop_moving object="this.ship" immediate="true"/>
      <do_if value="not $result">
        <wait>
          <interrupt_after_time time="5s"/>
          <interrupt>
            <conditions>
              <check_any>
                <event_object_jump_completed object="this.ship"/>
                <event_object_changed_zone object="this.ship" zone="$beacon.zone" comment="workaround because jump_completed doesnt seem to trigger"/>
                <event_object_jump_aborted object="this.ship"/>
              </check_any>
            </conditions>
            <actions>
              <do_if value="event.name == 'event_object_jump_completed' or event.name == 'event_object_changed_zone'">
                <set_value name="$result" exact="true"/>
              </do_if>
             <do_elseif value="event.name == 'event_object_jump_aborted'">
                <set_value name="$result" exact="false"/>
              </do_elseif>
            </actions>
          </interrupt>
        </wait>
      </do_if>
      <do_if value="$result">
        <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 %3 Sucessfully Jumped'.[player.age,this.name,this.container.name]"/>
      </do_if>
      <do_else>
        <debug_text filter="error" text="'%1 %2 %3 Jump failed!!!! Possible Reasons:\nFuel: %4 of %5 Jumpdrive Name:%6, Cooldown: %7 operational: %8 Firstresult: %9\nPerforming Fallback Warp'.[player.age,this.name,this.container.name,this.ship.cargo.{ware.fuelcells}.count,this.ship.jumpcostto.{$destination},$jumpdrive.name,$jumpdrive.cooldowntimeleft,$jumpdrive.isoperational,@$firstresul]"/>
        <debug_text filter="error" text="'Additional Info: Current Zone: %1, Target Zone: %2, Beacon: %3, result: %4\ncooldowntimes: 1: %5, 2: %6, 3: %7 4: %8   Player Zone: %9'.[this.zone.name,$beacon.zone.name,$beacon.name,@$result,$debug_cooldowntime1,$debug_cooldowntime2,$debug_cooldowntime3,$debug_cooldowntime4,player.zone.name]"/>
        <stop_moving object="this.ship" immediate="true"/>
        <warp object="this.ship" zone="$beacon.zone">
          <safepos allowyaxis="true" value="$beacon.position" radius="this.ship.size"/>
          <orientation refobject="$beacon" orientation="look_away"/>
        </warp>
      </do_else>
      <signal_objects object="this.ship" param="'travel completed'"/>
      
      <!-- Fly forward to not stay still while cooling for the next Jump -->
      <set_value name="this.$mayabortpath" comment="to allow following Scripts to immediately change Destination"/>
      <move_to object="this.ship" destination="this.zone" finishonapproach="true" sinceversion="30" commandaction="false" abortpath="true">
        <position space="this.zone" object="this.ship" z="5km"/>
        <rotation value="this.ship.rotation"/>
        <interrupt_after_time time="0s"/>
      </move_to>
      <set_value name="this.$mayabortpath" comment="tell following movement Script that the remainder of the Path is irrelevant"/>
      
      <!-- all Jump done - remove from wait group and wait till leader continues -->
      <remove_from_group group="$leader_preparegroup" object="this.ship"/>
      <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 %3 Jump done, Blocking Group: %4'.[player.age,this.name,this.container.name,$leader_preparegroup]"/>
      <do_if value="$leader.exists">
        <signal_objects object="$leader" param="'preparegroup shrunk'"/>
      </do_if>
      
      
      <!-- We have Arrived - As Leader wait till all Followers are there, too before progressing -->
      <do_if value="not $leader.exists">
        <do_while value="$leader_preparegroup.count">
          <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 %3 Waiting for followers to be to Arrive\nBlocking Group: %4 ( %5 Members )'.[player.age,this.name,this.container.name,$leader_preparegroup,$leader_preparegroup.count]"/>
          <wait max="1min">
            <interrupt>
              <conditions>
                <event_object_signalled object="this.ship" param="'preparegroup shrunk'"/>
              </conditions>
          </interrupt>
        </wait>
        </do_while>
      </do_if>
      <do_elseif value="$leader.zone != $beacon.zone" comment="wait till leader arrives, too">
        <wait sinceversion="30">
          <interrupt>
            <conditions>
              <event_object_changed_zone object="$leader" zone="$beacon.zone"/>
            </conditions>
          </interrupt>
        </wait>
      </do_elseif>
      
      <return value="$result"/>
      
    </actions>
  </attention>
  <on_abort>
    <!-- Abort Jump -->
    <do_if value="event.name != 'event_object_destroyed'">
      <abort_jump object="this.ship" />
    </do_if>
    <!-- remove Effect -->
    <do_if value="$slowcharge?">
      <remove_effect object="$jumpdrive" effect="$slowchargeeffect"/>
    </do_if>
    <!-- remove from preparegroup -->
    <do_if value="@$leader_preparegroup.indexof.{this.ship}">
      <remove_from_group group="$leader_preparegroup" object="this.ship"/>
      <do_if value="$leader.exists">
        <signal_objects object="$leader" param="'preparegroup shrunk'"/>
      </do_if>
    </do_if>
    <!-- signal followers to abort, too -->
    <signal_objects object="this.ship" param="'travel aborted'"/>
  </on_abort>
</aiscript>
