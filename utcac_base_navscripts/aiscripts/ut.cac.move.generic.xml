<?xml version="1.0" encoding="UTF-8" ?>
<aiscript name="ut.cac.move.generic" version="30" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://utnas/~unitrader/XRebirthxsds/aiscripts.xsd">
  <!--

 rewritten from scratch by UniTrader
  
  Generic routine for moving to a specific location.
  Will get the Path and call the relevant scripts for each movement Step.
  Will also start from the beginning if Target Object switched Zone Context to follow it until both are in the same Zone
  But will terminate if $destination is reached (no cheap follow mode, just getting there)
  No Movement done here directly, all is in a specific sub-script pere movement type (Gate passage, Jump, Boost, normal/exact

  -->
  <params>
    <param name="params" default="false" comment="pass a single Table filled with the wanted param Values here to make calls via list possible (always has priority)"/>
    <param name="destination" default="null" comment="can be a space or an object in a zone. Providing Sector and Cluster will attempt to find the nearest zone"/>
    <param name="position" default="null" comment="position is treated as an offset to destination. Default: safe position on [0,0,0] of destination"/>
    <param name="rotation" default="null" comment="rotation the ship should have - overridden by lookat"/>
    <param name="lookat" default="null" comment="position the ship should point to - overrides rotation"/>
    <param name="endintargetspace" default="false" comment="complete this script if we have the correct Space context, no matter where (may be Cluster, Sector or Zone, will resolve to Zone if an Object is the destination)"/>
    <param name="exitonneworder" default="false" comment="Exit immediately when receiving a new Order. If set to a Number of 2 or greater this is the Number of Orders the this.{$orderlist} has to contain before aborting (since 1 is always this Script)"/>
  </params>
  <init>
    <!-- first turn params param into the real params -->
    <do_if value="$params.$destination?">
      <set_value name="$destination" exact="$params.$destination"/>
    </do_if>
    <do_if value="$params.$position?">
      <set_value name="$position" exact="$params.$position"/>
    </do_if>
    <do_if value="$params.$rotation?">
      <set_value name="$rotation" exact="$params.$rotation"/>
    </do_if>
    <do_if value="$params.$lookat?">
      <set_value name="$lookat" exact="$params.$lookat"/>
    </do_if>
    <do_if value="$params.$endintargetspace?">
      <set_value name="$endintargetspace" exact="$params.$endintargetspace"/>
    </do_if>
    <do_if value="$params.$exitonneworder?">
      <set_value name="$exitonneworder" exact="$params.$exitonneworder"/>
    </do_if>
    <!-- confirm that Destination is Valid - will be re-checked and exited in beginning of main Script -->
    <do_if value="not $destination.exists">
      <debug_text filter="general" text="'%1 %2 Destination not existent: %3 %4'.[this.name,this.container.name,@$destination,@$destination.knownname]"/>
    </do_if>
  </init>
  <interrupts>
    <library>
      <handler name="ut_cac_follow_signalling" comment="Handler for Navigation Signals provided by this Script for usage in Follow and Escort Scripts">
        <conditions>
          <check_all>
            <check_any>
              <check_all>
                <event_object_signalled object="$object" param="'travel dockat'" check="false"/>
                <check_value value="this.ship.zone ==  $object.zone"/><!-- make sure we are in the same Zone before attempting slow-boating to leader destination... -->
              </check_all>
              <check_all>
                <event_object_signalled object="$object" param="'travel normal start'" check="false"/>
                <check_value value="this.ship.zone ==  $object.zone"/><!-- make sure we are in the same Zone before attempting slow-boating to leader destination... -->
              </check_all>
              <check_all>
                <event_object_signalled object="$object" param="'travel boost prep'" check="false"/>
                <check_value value="this.ship.sector ==  $object.sector"/><!-- make sure both Ships are in the same sectors... -->
                <check_value value="this.ship.zone ==  $object.zone"/><!-- ToDo: Also checking Zone Context for now because Boost Script assuemes this.. resolve this -->
              </check_all>
              <check_all>
                <event_object_signalled object="$object" param="'travel jump prep'" check="false"/>
                <check_value value="this.ship.jumpcostto.{event.param2.{2}} le $object.jumpcostto.{event.param2.{2}}"/><!-- make sure we dont skip needed Jumps on the way... -->
              </check_all>
              <check_all>
                <event_object_signalled object="$object" param="'travel jump start'" check="false"/>
                <check_value value="not ( this.commandaction.value == commandaction.jumping ) " comment="make sure we really missed the Jump Script"/>
                <check_value value="this.ship.jumpcostto.{event.param2} le $object.jumpcostto.{event.param2.{2}}"/><!-- make sure we dont skip needed Jumps on the way... -->
              </check_all>
              <check_all>
                <event_object_signalled object="$object" param="'travel gate prep'" check="false"/>
                <check_value value="this.ship.zone ==  event.param2.{1}.zone"/><!-- make sure we are in the Gate Zone before attempting Passage... -->
              </check_all>
              <check_all>
                <event_object_signalled object="$object" param="'travel aborted'" check="false"/>
              </check_all>
            </check_any>
          </check_all>
        </conditions>
        <actions>
          <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Signal on Leader received:\nparam: %3 , param2: %4 , param3: %5'.[this.name,this.container.name,event.param,event.param2,event.param3]"/>
          <do_if value="event.param == 'travel dockat'">
            <do_if value="$follow_position?">
              <debug_text filter="error" text="'%1 %2 $follow_position already set! ( %3 ) Do not use this Var when using ut_cac_follow_signalling!!! Overriding Var!'.[this.name,this.container.name,$follow_position]"/>
            </do_if>
            <!-- Leader attempts to Dock somewhere - Fly to near position outside Bounding Box -->
            <create_position_outside_boundingbox name="$follow_position" component="event.param2.{1}" distance="this.ship.size">
              <position value="event.param2.{3}"/>
            </create_position_outside_boundingbox>
            <get_safe_pos result="$follow_position" radius="this.ship.size" allowyaxis="true" value="$follow_position" ignored="this.ship" zone="event.param2.{1}.zone" min="$object.size * 2"/>
            <run_interrupt_script name="'ut.cac.move.to.pos'" abortscripts="true" resume="start">
              <param name="destination" value="event.param2.{1}.zone"/>
              <param name="position" value="$follow_position"/>
            </run_interrupt_script>
            <remove_value name="$follow_position" comment="never actually executed. also do it in refering Script after the (re)start label!!"/>
          </do_if>
          <do_elseif value="event.param == 'travel normal start'">
            <!-- interrupt with regular Travel script -->
            <run_interrupt_script name="'ut.cac.move.to.pos'" abortscripts="true" resume="start">
              <param name="destination" value="event.param2.{2}"/>
              <param name="position" value="event.param2.{3}"/>
              <param name="rotation" value="@event.param2.{4}"/>
              <param name="leader" value="event.param2.{1}"/>
              <param name="leader_preparegroup" value="event.param3"/>
            </run_interrupt_script>
          </do_elseif>
          <do_elseif value="event.param == 'travel boost prep'">
            <!-- interrupt with boost script -->
            <run_interrupt_script name="'ut.cac.move.boost'" abortscripts="true" resume="start">
              <param name="destination" value="event.param2.{2}"/>
              <param name="position" value="event.param2.{3}"/>
              <param name="leader_startposition" value="event.param2.{4}"/>
              <param name="leader_startrotation" value="event.param2.{5}"/>
              <param name="leader" value="event.param2.{1}"/>
              <param name="leader_preparegroup" value="event.param3"/>
            </run_interrupt_script>
          </do_elseif>
          <do_elseif value="event.param == 'travel jump prep'">
            <!-- interrupt with jump script -->
            <run_interrupt_script name="'ut.cac.move.jump'" abortscripts="true" resume="start">
              <param name="destination" value="event.param2.{2}"/>
              <param name="type" value="'object'"/>
              <param name="leader" value="event.param2.{1}"/>
              <param name="leader_preparegroup" value="event.param3"/>
            </run_interrupt_script>
          </do_elseif>
          <do_elseif value="event.param == 'travel jump start'">
            <!-- interrupt with jump script -->
            <run_interrupt_script name="'ut.cac.move.jump'" abortscripts="true" resume="start">
              <param name="destination" value="event.param2.{2}"/>
              <param name="type" value="'object'"/>
              <param name="leader" value="event.param2.{1}"/>
              <param name="leader_preparegroup" value="event.param3"/>
              <param name="leader_ready" value="true"/>
            </run_interrupt_script>
          </do_elseif>
          <do_elseif value="event.param == 'travel gate prep'">
            <!-- interrupt with Gate Passage script -->
            <run_interrupt_script name="'ut.cac.move.gate2'" abortscripts="true" resume="start">
              <param name="gate" value="event.param2.{1}"/>
              <param name="queue_position" value="event.param2.{2}"/>
              <param name="passage_group" value="event.param3"/>
              <param name="leader" value="$object"/>
            </run_interrupt_script>
          </do_elseif>
          <do_elseif value="event.param == 'travel aborted'">
            <abort_called_scripts resume="start"/>
          </do_elseif>
        </actions>
      </handler>
    </library>
    <handler ref="ut_cac_lib_interrupt_attacked"/>
    <handler>
      <conditions>
        <event_object_target_invalid object="this.ship"/>
      </conditions>
      <actions>
        <debug_text filter="error" text="'%1 %2 Target Invalid: Current Zone: %3 , Invalid Target: %4 $destination: %5 - restarting'.[this.name,this.container.name,this.zone.knownname,event.param.knownname,@$destination.knownname]"/>
        <abort_called_scripts/>
        <resume label="start"/>
      </actions>
    </handler>
    <handler>
      <!--- destination destroyed - abort Movement and (for now) also print an Error -->
      <conditions>
        <event_object_destroyed object="@$destination" comment="script will check immediately that destination is valid at start"/>
      </conditions>
      <actions>
        <debug_text filter="error" text="'%1 %2 Destination destroyed: %3'.[this.name,this.container.name,event.param.knownname,@$destination.knownname]"/>
        <abort_called_scripts/>
        <return value="1"/>
      </actions>
    </handler>
    <handler>
      <conditions>
        <check_any>
          <event_object_changed_zone object="@$destination"/>
          <event_object_signalled object="$destination" param="'travel next waypoint'"/>
          <event_object_changed_zone object="this.ship"/>
        </check_any>
        <check_value value="$targetspace != ( if $destination.pilot.$waypoint? then $destination.pilot.$waypoint else $destination.zone )"/>
      </conditions>
      <actions>
        <do_if value="$destination.zone == this.zone">
          <!-- Somehow check if there is a movement Step currently in progress before exit-ing? -->
          <debug_text filter="general" text="'%1 %2 Catchup Sucessful on Zone Change in %3 - exiting'.[this.name,this.container.name,this.zone.name]"/>
          <return/>
        </do_if>
        <do_if value="event.object == $destination">
          <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Object changed Zone - trying to catch up: $targetspace: %3 $destination.pilot.$waypoint: %4 $destination.zone: %5'.[this.name,this.container.name,$targetspace.name,@$destination.pilot.$waypoint.name,$destination.zone.name]"/>
          <abort_called_scripts resume="start"/>
        </do_if>
      </actions>
    </handler>
    <handler ref="ut_cac_exitonneworder"/>
  </interrupts>
  <attention min="unknown">
    <actions>
      <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Script started with Params:\n$destination: %3 , $position: %4 , $rotation: %5 , $lookat: %6  , $endintargetspace: %7'.[this.name,this.container.name,$destination.knownname,$position,$rotation,$lookat,$endintargetspace]"/>
      
      <set_value name="$bigship" exact="this.ship.isclass.ship_xl or this.ship.isclass.ship_l"/>
      
      
      <!-- first Validate Input -
      A) was a correct/existent Destination passed
      B) can this Object go to that Destination (Bigships cannt enter Tubes)
      -->
      
      <do_if value="not $destination.exists">
        <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Destination does not exist - aborting'.[this.name,this.container.name]"/>
        <return value="2"/>
      </do_if>
      
      <run_script name="'ut.cac.move.free'">
        <param name="fast" value="true"/>
      </run_script>
      
      <label name="start"/>
      
      <do_if value="$exitonneworder gt 1 and this.$orderlist.{$exitonneworder}?">
        <resume label="finish"/>
      </do_if>
      
      <!-- if destination is a Space (galaxy, Cluster, Sector, Zone) use it as targetspace, otherwise get its Zone as first Destination and care about the fine movements only in the last step -->
      <do_if value="$destination.isclass.galaxy or $destination.isclass.cluster or $destination.isclass.sector or $destination.isclass.zone">
        <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Destination is a Space - Move until we have the right Context'.[this.name,this.container.name]"/>
        <set_value name="$targetspace" exact="$destination"/>
      </do_if>
      <do_elseif value="$destination.isclass.ship">
        <do_if value="$destination.pilot.$waypoint?">
          <set_value name="$targetspace" exact="$destination.pilot.$waypoint"/>
          <do_if value="$targetspace.isclass.gate">
            <set_value name="$targetspace" exact="$targetspace.destination"/>
          </do_if>
          <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Destination is a Ship which has announced its next movement Step - follow it to %3 to meet up'.[this.name,this.container.name,$targetspace.knownname]"/>
        </do_if>
        <do_else>
          <set_value name="$targetspace" exact="$destination.zone"/>
          <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Destination is a Ship ( %4  // %5 ) which didnt announce its movement intention - Fly to its Zone %3'.[this.name,this.container.name,$targetspace.knownname,$destination.knownname,$destination.pilot.knownname]"/>
        </do_else>
      </do_elseif>
      <do_else>
        <set_value name="$targetspace" exact="$destination.zone"/>
        <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Destination is an Object - First move into right Zone, but regulary check if the Destination Object switched Zones'.[this.name,this.container.name]"/>
      </do_else>
      
      <set_value name="this.$destination" exact="$destination" comment="announce our Destinatio to Followers to ease Navigation"/>
      <!-- Set Script Expressions for Advanced Renaming -->
      <do_if value="@readtext.{5554302}.{1} != '=ReadText5554302-1=' and this.ship.owner == faction.player">
        <do_if value="not this.$namereplacement?">
          <set_value name="this.$namereplacement" exact="table[]"/>
        </do_if>
        <do_if value="$destination.isclass.{[class.ship,class.station]}">
          <set_value name="this.$namereplacement.$destination" exact="$destination.zone.name"/>
        </do_if>
        <do_else>
          <set_value name="this.$namereplacement.$destination" exact="$targetspace.name"/>
        </do_else>
        <signal_objects object="this.container" param="'Object Name Updated'" delay="100ms"/>
      </do_if>
      <do_if value="this.$ut_cac?">
        <set_value name="this.$ut_cac.$isactive"/>
      </do_if>
      
      
      <!-- then check if we maybe already have the right Context in which case we can just exit / go to the fine movements -->
      <do_if value="this.ship.hascontext.{$targetspace}">
        <do_if value="$destination == $targetspace and $endintargetspace">
          <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Already has right Context - Exit without movement'.[this.name,this.container.name]"/>
          <return/>
        </do_if>
        <do_elseif value="$endintargetspace">
          <do_if value="$destination.pilot.$waypoint? and $destination.zone != this.zone">
            <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Is already in the right Zone - Waiting for Target to arrive there, too'.[this.name,this.container.name]"/>
            <wait>
              <interrupt>
                <conditions>
                  <event_object_changed_zone object="@$destination" zone="this.zone"/>
                </conditions>
              </interrupt>
            </wait>
          </do_if>
          <do_else>
            <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Is already in the right Zone - Exit without movement'.[this.name,this.container.name]"/>
          </do_else>
          <return/>
        </do_elseif>
        <do_else>
          <!-- ToDo: Fine Movements -->
          <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Is already in the right Zone - Skipping to fine movement'.[this.name,this.container.name]"/>
          <resume label="fine movement"/>
        </do_else>
      </do_if>
      
      <!-- for Ships which can Jump: Jump Path -->
      <do_if value="this.ship.isclass.ship_xl or this.ship.isclass.ship_l">
        <do_if value="this.sector == $targetspace or this.sector == $targetspace.sector">
          <resume label="fine movement"/>
        </do_if>
        <do_if value="$targetspace.isclass.zone">
          <set_value name="$pathend" exact="$targetspace.sector"/>
        </do_if>
        <do_elseif value="$targetspace.isclass.sector">
          <set_value name="$pathend" exact="$targetspace"/>
        </do_elseif>
        <do_elseif value="$targetspace.isclass.cluster">
          <find_sector name="$pathend" space="$targetspace"/>
        </do_elseif>
        <do_else>
          <debug_text filter="error" text="'%1 %2 Targetspace is not a Space! %3! trying to get its Sector...'.[this.name,this.container.name,$targetspace.knownname]"/>
          <set_value name="$pathend" exact="$targetspace.sector"/>
        </do_else>
        <get_jump_path component="$waypoints" multiple="true" start="this.sector" end="$pathend"/>
        <remove_value name="$pathend"/>
        <!-- set last Entry with the Target Sector to the exact Target Space so we can determine the closest Beacon -->
        <set_value name="$waypoints.{$waypoints.count}" exact="$targetspace"/>
        
        <!-- For Testing: print the full Path to Debuglog -->
        <do_if value="@this.$debug">
          <set_value name="$LogMessage" exact="'%1 %2 Jump Path:'.[this.name,this.container.name]"/>
          <do_all exact="$waypoints.count" counter="$i">
            <set_value name="$LogMessage" exact="'%1\n%2 - %3 // %4 // %5'.[$LogMessage,$i,$waypoints.{$i}.class,$waypoints.{$i}.knownname,@$waypoints.{$i}.cluster.knownname]"/>
          </do_all>
          <debug_text filter="general" text="$LogMessage"/>
        </do_if>
        
        <!-- filter the Jump Path for the relevant Path Waypoints (Filter out Sectors where next Waypoint is a Gate in the same Sector, filter out Exit Gate in case we already have an Entry Gate, filter out Exit Gate Sector)-->
        <!--  remove the first item which is always the Start that we dont need in any case -->
        <remove_value name="$waypoints.{1}"/>
        <set_value name="$id" exact="1"/>
        <do_while value="$id lt $waypoints.count">
          <do_if value="$waypoints.{$id}.isclass.gate">
            <do_if value="$waypoints.{$id}.destination == $waypoints.{$id+1}.zone">
              <!-- remove Exit Gate Sector -->
              <do_if value="$waypoints.{$id+1}.sector == $waypoints.{$id+2}">
                <remove_value name="$waypoints.{$id+2}"/>
              </do_if>
              <do_else>
                <debug_text filter="general" chance="@this.$debug * 100" text="'Next Gate waypoint not in same Sector ( %1) as next+1 Sector ( %2 ) Waypoint - skipping removal'.[$waypoints.{$id+1}.sector.knownname,$waypoints.{$id+2}.sector.knownname]"/>
              </do_else>
              <!-- remove Exit Gate -->
              <remove_value name="$waypoints.{$id+1}"/>
              <!-- remove Entry Gate Sector-->
              <do_if value="$waypoints.{$id}.sector == @$waypoints.{$id-1}">
                <remove_value name="$waypoints.{$id-1}"/>
                <set_value name="$id" operation="subtract"/>
              </do_if>
              <do_else>
                <debug_text filter="general" chance="@this.$debug * 100" text="'Previous Sector waypoint not in same Sector as current Gate - skipping removal!'"/>
              </do_else>
            </do_if>
          </do_if>
          <set_value name="$id" operation="add"/>
        </do_while>
        
        <!-- For Testing: print the full Path to Debuglog -->
        <do_if value="@this.$debug">
          <set_value name="$LogMessage" exact="'%1 %2 Jump Path cleared:'.[this.name,this.container.name]"/>
          <do_all exact="$waypoints.count" counter="$i">
            <set_value name="$LogMessage" exact="'%1\n%2 - %3 // %4 // %5'.[$LogMessage,$i,$waypoints.{$i}.class,$waypoints.{$i}.knownname,@$waypoints.{$i}.cluster.knownname]"/>
          </do_all>
          <debug_text filter="general" text="$LogMessage"/>
        </do_if>
        
        <!-- Track Experience Progress: Save time when Navigation started and ended -->
        <do_if value="this.$ut_cac.$experience.{skilltype.navigation}?">
          <set_value name="$nav_start_time" exact="player.age"/>
        </do_if>
        
        <!-- follow the Waypoints to the Destination Zone/Space, when we reached the right Cluster or Sector Exit (no need to follow remaining waypoints), when Destination is a Zone or Object continue with boosting towards Destination in a seperate script -->
        <do_while value="$waypoints.count">
          <set_value name="this.$waypoint" exact="$waypoints.{1}"/>
          <signal_objects object="this.ship" param="'travel next waypoint'"/>
          <do_if value="this.$waypoint.isclass.sector">
            <!-- check if InCluster-Boost is allowed and makes sense ( = faster than slow JD charge ) -->
            <do_if value="@this.$ut_cac.$clusterboost and global.$ship_boost_speed.{this.ship.macro}? and ( global.$ship_boost_speed.{this.ship.macro} / this.ship.distanceto.{this.$waypoint} ) lt 600m">
              <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Attempting to boost to %3'.[this.name,this.container.name,this.$waypoint.knownname]"/>
              <!-- BOOST!! -->
              <run_script name="'ut.cac.move.boost'" sinceversion="30">
                <param name="destination" value="this.$waypoint"/>
              </run_script>
              <do_if value="not this.ship.hascontext.{this.$waypoint}">
                <debug_text filter="error" text="'IC Boost failed! (why did it even happen?) Destination: %1 / %2 Current Sector/Zone: %3 / %4'.[@this.$waypoint.sector.name,this.$waypoint.name,this.sector.name,this.zone.name]"/>
              </do_if>
            </do_if>
            <do_if value="not this.ship.hascontext.{this.$waypoint}" comment="didnt attemt to IC-Boost or IC-Boost failed">
              <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Jumping to %3'.[this.name,this.container.name,this.$waypoint.knownname]"/>
              <!-- JUMP!! -->
              <run_script name="'ut.cac.move.jump'" result="$result">
                <param name="destination" value="this.$waypoint"/>
              </run_script>
              <do_if value="not this.ship.hascontext.{this.$waypoint}">
                <debug_text filter="error" text="'Jump Failed! Destination: %1 / %2 Current Sector/Zone: %3 / %4 - restarting'.[@this.$waypoint.sector.name,this.$waypoint.name,this.sector.name,this.zone.name]"/>
                <resume label="start"/>
              </do_if>
            </do_if>
          </do_if>
          <do_elseif value="this.$waypoint.isclass.gate">
            
            <!-- Jump to Gate sector -->
            <find_object name="$beacon" space="this.$waypoint.zone" class="class.jumpbeacon" knownto="this.owner" checkoperational="true" chance="@this.$ut_cac.$insectorjump * 100" comment="if beacon is in Target Zone consider IS-Jump"/>
            <do_if value="this.sector != this.$waypoint.sector or @$beacon.exists">
              <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Jumping to nearest Jumpbeacon to %3 for gate passage'.[this.name,this.container.name,this.$waypoint.knownname]"/>
              <run_script name="'ut.cac.move.jump'" result="$result">
                <param name="destination" value="this.$waypoint.zone"/>
              </run_script>
              <do_if value="not this.ship.hascontext.{this.$waypoint.sector}">
                <debug_text filter="error" text="'Move Gate - Jump Failed! Destination: %1 / %2 Current Sector/Zone: %3 / %4 - restarting'.[@this.$waypoint.sector.name,this.$waypoint.name,this.sector.name,this.zone.name]"/>
                <resume label="start"/>
              </do_if>
            </do_if>
            
            <!-- Boost to Gate Position -->
            <do_if value="this.zone != this.$waypoint.zone or this.ship.distanceto.{this.$waypoint} gt 7km">
              <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Boosting near to %3 for gate passage'.[this.name,this.container.name,this.$waypoint.knownname]"/>
              <run_script name="'ut.cac.move.boost'">
                <param name="destination" value="this.$waypoint"/>
                <param name="position" value="position.[0m,0m,0-(this.ship.size + this.$waypoint.size)]" comment="relative to destination! (including its rotation)"/>
              </run_script>
              <do_if value="not this.ship.hascontext.{this.$waypoint.zone}">
                <debug_text filter="error" text="'Move Gate - Boost Failed! Destination: %1 / %2 Current Sector/Zone: %3 / %4 - restarting'.[@this.$waypoint.sector.name,this.$waypoint.name,this.sector.name,this.zone.name]"/>
                <resume label="start"/>
              </do_if>
            </do_if>
            <remove_value name="$waypointposition"/>
            
            <!-- Move through Gate -->
            <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 moving through Gate in %3'.[this.name,this.container.name,this.$waypoint.zone.knownname]"/>
            <run_script name="'ut.cac.move.gate2'">
              <param name="gate" value="this.$waypoint"/>
            </run_script>
            <do_if value="not this.ship.hascontext.{this.$waypoint.destination}">
              <debug_text filter="error" text="'Move Gate itself Failed! Destination: %1 / %2 Current Sector/Zone: %3 / %4 - restarting'.[@this.$waypoint.sector.name,this.$waypoint.name,this.sector.name,this.zone.name]"/>
              <resume label="start"/>
            </do_if>
          </do_elseif>
          <do_elseif value="this.$waypoint.isclass.zone">
            <!-- next is the Target Zone/Sector - First jump to the closest Beacon (if necesary), then go to Fine Movement for the Destination (with Boosting) -->
            <!-- ToDo: check ii we could save a bit time with IS-Jumping-->
            <do_if value="this.$waypoint.sector != this.sector or @this.$ut_cac.$insectorjump">
              <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 Last Waypoint, Jumping to closest Zone %3'.[this.name,this.container.name,this.$waypoint.knownname]"/>
              <run_script name="'ut.cac.move.jump'" result="$result">
                <param name="destination" value="this.$waypoint"/>
              </run_script>
              <do_if value="not this.ship.hascontext.{this.$waypoint.sector}">
                <debug_text filter="error" text="'Move Zone - Jump Failed! Destination: %1 / %2 Current Sector/Zone: %3 / %4 - restarting'.[@this.$waypoint.sector.name,this.$waypoint.name,this.sector.name,this.zone.name]"/>
                <resume label="start"/>
              </do_if>
            </do_if>
            <resume label="fine movement"/>
            <return/>
          </do_elseif>
          <do_if value="this.ship.hascontext.{$targetspace}">
            <debug_text filter="general" chance="@this.$debug * 100" text="'%1 %2 We have Destination Context in %3'.[this.name,this.container.name,this.$waypoint.knownname]"/>
            <!-- we have reached the Target Space (which is a Sector or Cluster) - Exit -->
            <return/>
          </do_if>
          <remove_value name="$waypoints.{1}"/>
          <!-- check if $destination object has switched context and if yes restart pathing to keep up -->
          <do_if value="$targetspace != $destination.zone and $targetspace != $destination">
            <!-- goes back to line 103 -->
            <resume label="start"/>
          </do_if>
        </do_while>
        <debug_text filter="error" text="'%1 %2 This Part should NEVER be reached!!! last waypoint: %3, destination: %4 - Restarting'.[this.name,this.container.name,this.$waypoint.knownname,$destination.knownname]"/>
        <resume label="start"/>
      </do_if>
      <do_else>
        <debug_text filter="general" text="'%1 %2 Small Ships not implemented yet - defaulting to vanilla movement script'.[this.name,this.container.name,this.$waypoint.knownname]"/>
        <run_script name="'move.generic'">
          <param name="destination" value="$destination" comment="can be a space or an object in a zone. Providing Sector and Cluster will attempt to find the nearest zone"/>
          <param name="position" value="$position" comment="position is treated as an offset to destination. Default: safe position on [0,0,0] of destination"/>
          <param name="rotation" value="$rotation" comment="rotation the ship should have - overrides lookat"/>
          <param name="lookat" value="$lookat" comment="position the ship should point to - overridden by rotation"/>
          <param name="endintargetzone" value="$endintargetspace" comment="complete this script if we have the correct Zone context, no matter where"/>
        </run_script>
        <return/>
      </do_else>
      
      <label name="fine movement"/>
      
      <!-- first check if it makes sense to Boost (not in Target Zone or Destination more than 20 km away) and boost to a generous safe spot nearby the Target -->
      <!-- Final boost to nearby the Destination Object - get safepos a bit in our Direction before to avoid yoyo-effect-->
      <get_safe_pos result="$safepos" zone="if $destination.isclass.zone then $destination else $destination.zone" value="if $position then $position else position.[0m,0m,0m]" radius="this.ship.size" directionobject="this.ship" min="5km"/>
      <do_if value="this.zone != $targetspace or ( this.ship.distanceto.{$destination} gt 7km and $destination != $targetspace )">
        <set_value name="this.$waypoint" exact="$targetspace"/>
        <run_script name="'ut.cac.move.boost'">
          <param name="destination" value="if $destination.hascontext.{$targetspace} then $destination else $targetspace"/>
          <param name="position" value="$safepos" comment="position is treated as position relative to the destination (includes its rotation). Default: safe position on [0,0,0] of destination (Note: boost only moves nearby, not exact)"/>
        </run_script>
        <do_if value="not this.ship.hascontext.{$targetspace}">
          <debug_text filter="error" text="'Final boost Failed! Destination: %1 / %2 Current Sector/Zone: %3 / %4'.[@this.$waypoint.sector.name,this.$waypoint.name,this.sector.name,this.zone.name]"/>
        </do_if>
      </do_if>
      <set_value name="this.$waypoint" exact="this.zone"/>
      <remove_value name="this.$destination"/>
      
      <do_while value="not ( $destination.hascontext.{$targetspace} or $destination == $targetspace )">
        <wait sinceversion="30">
          <interrupt>
            <conditions>
              <check_any>
                <event_object_changed_zone object="$destination"/>
                <event_object_arrived_at_waypoint object="$destination" lastwaypoint="false"/>
              </check_any>
            </conditions>
          </interrupt>
        </wait>
      </do_while>
      
      <do_if value="not $endintargetspace">
        <!-- second move slowly near the Target (may not be necesary if we are satisfied with the Target Zone) -->
        <run_script name="'ut.cac.move.to.pos'">
          <param name="destination" value="$destination" comment="Object to move relative to - will default to relative to Zone if not set"/>
          <param name="position" value="$position" comment="position is treated as an offset to destination. Default: safe position on [0,0,0] of destination"/>
          <param name="rotation" value="$rotation" comment="rotation the ship should have - overridden by lookat"/>
          <param name="lookat" value="$lookat" comment="position the ship should point to - overrides rotation"/>
          <param name="forceendpos" value="true" comment="force moving until exact end position is reached"/>
        </run_script>
      </do_if>
      
      <label name="finish"/>
      <!-- Track Experience Progress: Add time needed for Navigation to XP Progress -->
      <do_if value="this.$ut_cac.$experience.{skilltype.navigation}? and $nav_start_time?">
        <set_value name="this.$ut_cac.$experience.{skilltype.navigation}" operation="add" exact="player.age - $nav_start_time"/>
        <!-- check for Promotion -->
        <do_if value="this.$ut_cac.$experience.{skilltype.navigation} gt param.ut_cac.experience.{skilltype.navigation}.{this.skill.navigation + 1}">
          <add_skill entity="this" type="skilltype.navigation" exact="1"/>
        </do_if>
        <do_elseif value="( this.$ut_cac.$experience.{skilltype.navigation} lt param.ut_cac.experience.{skilltype.navigation}.{this.skill.navigation} ) and this.skill.navigation ge 1">
          <!-- Skill and Experience out of Sync - Reset Skill (will level up again into the intended value during the next executions of this Script) -->
          <set_skill entity="this" type="skilltype.navigation" exact="1"/>
        </do_elseif>
      </do_if>
      
      <set_value name="this.$waypoint" exact="this.zone"/>
      <remove_value name="this.$destination"/>
    </actions>
  </attention>
  <on_abort>
    <set_value name="this.$waypoint" exact="this.zone"/>
    <remove_value name="this.$destination"/>
  </on_abort>
</aiscript>
