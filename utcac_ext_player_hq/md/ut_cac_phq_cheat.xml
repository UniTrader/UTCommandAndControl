<?xml version="1.0" encoding="UTF-8"?>
<mdscript xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="UT_CAC_PHQ_CHEAT" xsi:noNamespaceSchemaLocation="http://utnas/~unitrader/XRebirthxsds/md.xsd">
  <cues>
    <cue name="Create_PHQ">
      <actions>
        <set_value name="$sector" exact="player.sector"/>
        <debug_text filter="general" text="'found sector %1 %2'.[$sector,$sector.knownname]"/>
        <!--get_zone_at_position name="$PHQ_Zone" sector="$sector" value="position.[0m,100km,0m]" />
        <debug_text filter="general" text="'found zone %1 %2'.[$PHQ_Zone,$PHQ_Zone.knownname]"/-->
        <create_ship name="$Buildership" macro="macro.units_size_xl_builder_ship_plot_01_macro" sector="$sector">
          <position x="0m" y="50km" z="0m"/>
          <owner exact="faction.player"/>
        </create_ship>
        <debug_text filter="general" text="'created builder Ship %1 %2'.[$Buildership,$Buildership.knownname]"/>
        <set_value name="$PHQ_Zone" exact="$Buildership.zone"/>
        <debug_text filter="general" text="'found zone %1 %2'.[$PHQ_Zone,$PHQ_Zone.knownname]"/>
        <do_all exact="$PHQ_Zone.buildlocations.count" counter="$i">
          <do_if value="$PHQ_Zone.buildlocations.{$i}.offset.x == 0m and$PHQ_Zone.buildlocations.{$i}.offset.y == 0m and $PHQ_Zone.buildlocations.{$i}.offset.z == 0m">
            <set_value name="$buildlocation" exact="$PHQ_Zone.buildlocations.{$i}"/>
            <debug_text filter="general" text="'found buildlocation %1'.[$buildlocation]"/>
          </do_if>
          <do_else>
            <claim_build_location buildlocation="$PHQ_Zone.buildlocations.{$i}" object="$Buildership" comment="disabling all other Build Spots in Zone - the PHQ is BIG"/>
            <debug_text filter="general" text="'claimed buildlocation %1'.[$PHQ_Zone.buildlocations.{$i}]"/>
          </do_else>
        </do_all>
        <get_building_position position="$Buildershipposition" buildlocation="$buildlocation" macro="macro.struct_bt_UT_Omicron_Superyard_macro" object="$Buildership"/>
        <create_station name="$PHQ" macro="macro.struct_bt_UT_Omicron_Superyard_macro" owner="faction.player" zone="$PHQ_Zone">
          <position value="position.[0m,0m,0m]"/>
          <buildsequence sequence="'a'" stage="1"/>
          <buildsequence sequence="'e'" stage="4"/>
          <buildsequence sequence="'w'" stage="4"/>
          <buildsequence sequence="'$dock_a'" stage="1"/>
          <buildsequence sequence="'$dock_b'" stage="1"/>
          <buildsequence sequence="'$dock_c'" stage="1"/>
          <buildsequence sequence="'$dock_d'" stage="1"/>
          <buildsequence sequence="'$dock_e'" stage="1"/>
          <buildsequence sequence="'$dock_f'" stage="1"/>
          <buildsequence sequence="'$to'" stage="4"/>
        </create_station>
        <!-- Table for Sequence/Stage dependencies:
Sequence A (or more generally all sequences without $ prefix) are always buildable 
the rest depends on Settings in a Table: $table.{$sequence}.{$stage}
this is a List of conditions, usually in pairs usinf odd and the following even entries:
=> if the Sequence is in the Table but the Stage is higher than defined it willnot  be buildable
=> if there is no list but just true the Stage is always buildable (just requires the previous stage)
=> For odd Entries which are a String a required sequence is meant and the following even Entry defines the minimum Stage required
=> For odd Entries which are a Cue the following even Entry defines the State this Cue should be in before allowing this Extension
=> For odd Entries which are an Inventory Ware the following Entry defines how much of it should be consumed to build this Extension (or null if it just has to be present)
=> further Types of odd Entries are evaluated for their bool result (change Table externally to enable/disable) - the following even entry is ignored
*** More possibilities will be defined as needed ****
table[
$dock_a = [ 'w' , 3 ] , true ],
$dock_b = [ 'w' , 2 ] , true ],
$dock_c = [ [ 'w' , 1 ] , true ],
$dock_d = [ [ 'e' , 1 ] , true ],
$dock_e = [ [ 'e' , 2 ] , true ],
$dock_f = [ [ 'e' , 3 ] , true ],
$to = [ [ ware.teladioverwatchplans , 1 ] , [ ware.teladioverwatchplans , 1 , 'w' , 2 , 'e' , 2 ] , [ ware.teladioverwatchplans , 1 ] , [ ware.teladioverwatchplans , 1 ] ]
$hol = [ [ ware.holwarehouseplans , 1 ] , [ ware.holwarehouseplans , 1 ] , [ ware.holwarehouseplans , 1 ] , [ ware.holwarehouseplans , 1 ] ]


-->
        <debug_text filter="general" text="'created Station %1 %2'.[$PHQ,$PHQ.knownname]"/>
        <warp object="$Buildership" zone="$PHQ_Zone">
          <position value="$Buildershipposition"/>
          <orientation orientation="look_at" refobject="$PHQ"/>
        </warp>
        <connect_to_build_location object="$Buildership" buildlocation="$buildlocation"/>
      </actions>
      <cues>
        <cue name="Cheat_buildmaterials" instantiate="true">
          <conditions>
            <event_build_started object="$Buildership"/>
          </conditions>
          <actions>
            <set_value name="$materials" exact="$Buildership.buildmodule.neededslotresources.list"/>
            <do_all exact="$materials.count" counter="$i" reverse="true">
              <add_cargo object="$Buildership" ware="$materials.{$i}" exact="$Buildership.buildmodule.neededslotresources.{$materials.{$i}}.count"/>
            </do_all>
          </actions>
        </cue>
      </cues>
    </cue>
  </cues>
</mdscript>
